{"version":3,"file":"gridstack-all.js","mappings":"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","sources":["webpack://GridStack/webpack/universalModuleDefinition","webpack://GridStack/webpack/bootstrap","webpack://GridStack/webpack/runtime/define property getters","webpack://GridStack/webpack/runtime/hasOwnProperty shorthand","webpack://GridStack/./src/utils.ts","webpack://GridStack/./src/gridstack-engine.ts","webpack://GridStack/./src/types.ts","webpack://GridStack/./src/dd-manager.ts","webpack://GridStack/./src/dd-touch.ts","webpack://GridStack/./src/dd-resizable-handle.ts","webpack://GridStack/./src/dd-base-impl.ts","webpack://GridStack/./src/dd-resizable.ts","webpack://GridStack/./src/dd-draggable.ts","webpack://GridStack/./src/dd-droppable.ts","webpack://GridStack/./src/dd-element.ts","webpack://GridStack/./src/gridstack.ts","webpack://GridStack/./src/dd-gridstack.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GridStack\"] = factory();\n\telse\n\t\troot[\"GridStack\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\r\n * utils.ts 8.4.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStackElement, GridStackNode, GridStackOptions, numberOrString, GridStackPosition, GridStackWidget } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  let wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **removed** in a future release');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  let oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements. optional root which defaults to document (for shadow dom) */\r\n  static getElements(els: GridStackElement, root: HTMLElement | Document = document): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      const doc = ('getElementById' in root) ? root as Document : undefined;\r\n\r\n      // Note: very common for people use to id='1,2,3' which is only legal as HTML5 id, but not CSS selectors\r\n      // so if we start with a number, assume it's an id and just return that one item...\r\n      // see https://github.com/gridstack/gridstack.js/issues/2234#issuecomment-1523796562\r\n      if (doc && !isNaN(+els[0])) { // start with digit\r\n        const el = doc.getElementById(els);\r\n        return el ? [el] : [];\r\n      }\r\n\r\n      let list = root.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = root.querySelectorAll('.' + els);\r\n        if (!list.length) { list = root.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element. optional root which defaults to document (for shadow dom) */\r\n  static getElement(els: GridStackElement, root: HTMLElement | Document = document): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      const doc = ('getElementById' in root) ? root as Document : undefined;\r\n      if (!els.length) return null;\r\n      if (doc && els[0] === '#') {\r\n        return doc.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '#' || els[0] === '.' || els[0] === '[') {\r\n        return root.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if (doc && !isNaN(+els[0])) { // start with digit\r\n        return doc.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id, then class\r\n      let el = root.querySelector(els);\r\n      if (doc && !el) { el = doc.getElementById(els) }\r\n      if (!el) { el = root.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\r\n  }\r\n\r\n  /** returns true if a and b touch edges or corners */\r\n  static isTouching(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return Utils.isIntercepted(a, {x: b.x-0.5, y: b.y-0.5, w: b.w+1, h: b.h+1})\r\n  }\r\n\r\n  /** returns the area a and b overlap */\r\n  static areaIntercept(a: GridStackPosition, b: GridStackPosition): number {\r\n    let x0 = (a.x > b.x) ? a.x : b.x;\r\n    let x1 = (a.x+a.w < b.x+b.w) ? a.x+a.w : b.x+b.w;\r\n    if (x1 <= x0) return 0; // no overlap\r\n    let y0 = (a.y > b.y) ? a.y : b.y;\r\n    let y1 = (a.y+a.h < b.y+b.h) ? a.y+a.h : b.y+b.h;\r\n    if (y1 <= y0) return 0; // no overlap\r\n    return (x1-x0) * (y1-y0);\r\n  }\r\n\r\n  /** returns the area */\r\n  static area(a: GridStackPosition): number {\r\n    return a.w * a.h;\r\n  }\r\n\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for asc, -1 for desc (optional)\r\n   * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir: 1 | -1 = 1, column?: number): GridStackNode[] {\r\n    column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;\r\n    if (dir === -1)\r\n      return nodes.sort((a, b) => ((b.x ?? 1000) + (b.y ?? 1000) * column)-((a.x ?? 1000) + (a.y ?? 1000) * column));\r\n    else\r\n      return nodes.sort((b, a) => ((b.x ?? 1000) + (b.y ?? 1000) * column)-((a.x ?? 1000) + (a.y ?? 1000) * column));\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement, options?: { nonce?: string }): CSSStyleSheet {\r\n    let style: HTMLStyleElement = document.createElement('style');\r\n    const nonce = options?.nonce\r\n    if (nonce) style.nonce = nonce\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string): void {\r\n    let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (el && el.parentNode) el.remove();\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (typeof val === 'string') {\r\n      let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n      if (!match) {\r\n        throw new Error('Invalid height');\r\n      }\r\n      unit = match[2] || 'px';\r\n      h = parseFloat(match[1]);\r\n    } else {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) return;\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  return a == b;\r\n    if (typeof a !== typeof b) return false;\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) return false;\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** copies over b size & position (GridStackPosition), and optionally min/max as well */\r\n  static copyPos(a: GridStackWidget, b: GridStackWidget, doMinMax = false): GridStackWidget {\r\n    if (b.x !== undefined) a.x = b.x;\r\n    if (b.y !== undefined) a.y = b.y;\r\n    if (b.w !== undefined) a.w = b.w;\r\n    if (b.h !== undefined) a.h = b.h;\r\n    if (doMinMax) {\r\n      if (b.minW) a.minW = b.minW;\r\n      if (b.minH) a.minH = b.minH;\r\n      if (b.maxW) a.maxW = b.maxW;\r\n      if (b.maxH) a.maxH = b.maxH;\r\n    }\r\n    return a;\r\n  }\r\n\r\n  /** true if a and b has same size & position */\r\n  static samePos(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return a && b && a.x === b.x && a.y === b.y && a.w === b.w && a.h === b.h;\r\n  }\r\n\r\n  /** given a node, makes sure it's min/max are valid */\r\n  static sanitizeMinMax(node: GridStackNode) {\r\n    // remove 0, undefine, null\r\n    if (!node.minW) { delete node.minW; }\r\n    if (!node.minH) { delete node.minH; }\r\n    if (!node.maxW) { delete node.maxW; }\r\n    if (!node.maxH) { delete node.maxH; }\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      let val = a[key];\r\n      if (key[0] === '_' || val === b[key]) {\r\n        delete a[key]\r\n      } else if (val && typeof val === 'object' && b[key] !== undefined) {\r\n        for (let i in val) {\r\n          if (val[i] === b[key][i] || i[0] === '_') { delete val[i] }\r\n        }\r\n        if (!Object.keys(val).length) { delete a[key] }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** removes internal fields '_' and default values for saving */\r\n  static removeInternalForSave(n: GridStackNode, removeEl = true): void {\r\n    for (let key in n) { if (key[0] === '_' || n[key] === null || n[key] === undefined ) delete n[key]; }\r\n    delete n.grid;\r\n    if (removeEl) delete n.el;\r\n    // delete default values (will be re-created on read)\r\n    if (!n.autoPosition) delete n.autoPosition;\r\n    if (!n.noResize) delete n.noResize;\r\n    if (!n.noMove) delete n.noMove;\r\n    if (!n.locked) delete n.locked;\r\n    if (n.w === 1 || n.w === n.minW) delete n.w;\r\n    if (n.h === 1 || n.h === n.minH) delete n.h;\r\n  }\r\n\r\n  /** return the closest parent (or itself) matching the given class */\r\n  static closestUpByClass(el: HTMLElement, name: string): HTMLElement {\r\n    while (el) {\r\n      if (el.classList.contains(name)) return el;\r\n      el = el.parentElement\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n  static throttle(func: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        isWaiting = true;\r\n        setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    let style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\r\n  static getScrollElement(el?: HTMLElement): HTMLElement {\r\n    if (!el) return document.scrollingElement as HTMLElement || document.documentElement; // IE support\r\n    const style = getComputedStyle(el);\r\n    const overflowRegex = /(auto|scroll)/;\r\n\r\n    if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n      return el;\r\n    } else {\r\n      return this.getScrollElement(el.parentElement);\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    let rect = el.getBoundingClientRect();\r\n    let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      let offsetDiffUp = rect.top;\r\n      let scrollEl = this.getScrollElement(el);\r\n      if (scrollEl !== null) {\r\n        let prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal Function used to scroll the page.\r\n   *\r\n   * @param event `MouseEvent` that triggers the resize\r\n   * @param el `HTMLElement` that's being resized\r\n   * @param distance Distance from the V edges to start scrolling\r\n   */\r\n  static updateScrollResize(event: MouseEvent, el: HTMLElement, distance: number): void {\r\n    const scrollEl = this.getScrollElement(el);\r\n    const height = scrollEl.clientHeight;\r\n    // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\r\n    // #1745 Special situation if scrollEl is document 'html': here browser spec states that\r\n    // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\r\n    // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\r\n    const offsetTop = (scrollEl === this.getScrollElement()) ? 0 : scrollEl.getBoundingClientRect().top;\r\n    const pointerPosY = event.clientY - offsetTop;\r\n    const top = pointerPosY < distance;\r\n    const bottom = pointerPosY > height - distance;\r\n\r\n    if (top) {\r\n      // This also can be done with a timeout to keep scrolling while the mouse is\r\n      // in the scrolling zone. (will have smoother behavior)\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: pointerPosY - distance});\r\n    } else if (bottom) {\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - pointerPosY)});\r\n    }\r\n  }\r\n\r\n  /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */\r\n  static clone<T>(obj: T): T {\r\n    if (obj === null || obj === undefined || typeof(obj) !== 'object') {\r\n      return obj;\r\n    }\r\n    // return Object.assign({}, obj);\r\n    if (obj instanceof Array) {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      return [...obj] as any;\r\n    }\r\n    return {...obj};\r\n  }\r\n\r\n  /**\r\n   * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\r\n   * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\r\n   */\r\n  static cloneDeep<T>(obj: T): T {\r\n    // list of fields we will skip during cloneDeep (nested objects, other internal)\r\n    const skipFields = ['parentGrid', 'el', 'grid', 'subGrid', 'engine'];\r\n    // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\r\n    const ret = Utils.clone(obj);\r\n    for (const key in ret) {\r\n      // NOTE: we don't support function/circular dependencies so skip those properties for now...\r\n      if (ret.hasOwnProperty(key) && typeof(ret[key]) === 'object' && key.substring(0, 2) !== '__' && !skipFields.find(k => k === key)) {\r\n        ret[key] = Utils.cloneDeep(obj[key]);\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /** deep clone the given HTML node, removing teh unique id field */\r\n  public static cloneNode(el: HTMLElement): HTMLElement {\r\n    const node = el.cloneNode(true) as HTMLElement;\r\n    node.removeAttribute('id');\r\n    return node;\r\n  }\r\n\r\n  public static appendTo(el: HTMLElement, parent: string | HTMLElement): void {\r\n    let parentNode: HTMLElement;\r\n    if (typeof parent === 'string') {\r\n      parentNode = Utils.getElement(parent);\r\n    } else {\r\n      parentNode = parent;\r\n    }\r\n    if (parentNode) {\r\n      parentNode.appendChild(el);\r\n    }\r\n  }\r\n\r\n  // public static setPositionRelative(el: HTMLElement): void {\r\n  //   if (!(/^(?:r|a|f)/).test(window.getComputedStyle(el).position)) {\r\n  //     el.style.position = \"relative\";\r\n  //   }\r\n  // }\r\n\r\n  public static addElStyles(el: HTMLElement, styles: { [prop: string]: string | string[] }): void {\r\n    if (styles instanceof Object) {\r\n      for (const s in styles) {\r\n        if (styles.hasOwnProperty(s)) {\r\n          if (Array.isArray(styles[s])) {\r\n            // support fallback value\r\n            (styles[s] as string[]).forEach(val => {\r\n              el.style[s] = val;\r\n            });\r\n          } else {\r\n            el.style[s] = styles[s];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public static initEvent<T>(e: DragEvent | MouseEvent, info: { type: string; target?: EventTarget }): T {\r\n    const evt = { type: info.type };\r\n    const obj = {\r\n      button: 0,\r\n      which: 0,\r\n      buttons: 1,\r\n      bubbles: true,\r\n      cancelable: true,\r\n      target: info.target ? info.target : e.target\r\n    };\r\n    // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\r\n    if ((e as DragEvent).dataTransfer) {\r\n      evt['dataTransfer'] = (e as DragEvent).dataTransfer; // workaround 'readonly' field.\r\n    }\r\n    ['altKey','ctrlKey','metaKey','shiftKey'].forEach(p => evt[p] = e[p]); // keys\r\n    ['pageX','pageY','clientX','clientY','screenX','screenY'].forEach(p => evt[p] = e[p]); // point info\r\n    return {...evt, ...obj} as unknown as T;\r\n  }\r\n\r\n  /** copies the MouseEvent properties and sends it as another event to the given target */\r\n  public static simulateMouseEvent(e: MouseEvent, simulatedType: string, target?: EventTarget): void {\r\n    const simulatedEvent = document.createEvent('MouseEvents');\r\n    simulatedEvent.initMouseEvent(\r\n      simulatedType, // type\r\n      true,         // bubbles\r\n      true,         // cancelable\r\n      window,       // view\r\n      1,            // detail\r\n      e.screenX,    // screenX\r\n      e.screenY,    // screenY\r\n      e.clientX,    // clientX\r\n      e.clientY,    // clientY\r\n      e.ctrlKey,    // ctrlKey\r\n      e.altKey,     // altKey\r\n      e.shiftKey,   // shiftKey\r\n      e.metaKey,    // metaKey\r\n      0,            // button\r\n      e.target      // relatedTarget\r\n    );\r\n    (target || e.target).dispatchEvent(simulatedEvent);\r\n  }\r\n\r\n  /** returns true if event is inside the given element rectangle */\r\n  // Note: Safari Mac has null event.relatedTarget which causes #1684 so check if DragEvent is inside the coordinates instead\r\n  //    this.el.contains(event.relatedTarget as HTMLElement)\r\n  // public static inside(e: MouseEvent, el: HTMLElement): boolean {\r\n  //   // srcElement, toElement, target: all set to placeholder when leaving simple grid, so we can't use that (Chrome)\r\n  //   let target: HTMLElement = e.relatedTarget || (e as any).fromElement;\r\n  //   if (!target) {\r\n  //     const { bottom, left, right, top } = el.getBoundingClientRect();\r\n  //     return (e.x < right && e.x > left && e.y < bottom && e.y > top);\r\n  //   }\r\n  //   return el.contains(target);\r\n  // }\r\n}\r\n","/**\n * gridstack-engine.ts 8.4.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { Utils } from './utils';\nimport { GridStackNode, ColumnOptions, GridStackPosition, GridStackMoveOpts, SaveFcn, CompactOptions } from './types';\n\n/** callback to update the DOM attributes since this class is generic (no HTML or other info) for items that changed - see _notify() */\ntype OnChangeCB = (nodes: GridStackNode[]) => void;\n\n/** options used during creation - similar to GridStackOptions */\nexport interface GridStackEngineOptions {\n  column?: number;\n  maxRow?: number;\n  float?: boolean;\n  nodes?: GridStackNode[];\n  onChange?: OnChangeCB;\n}\n\n/**\n * Defines the GridStack engine that does most no DOM grid manipulation.\n * See GridStack methods and vars for descriptions.\n *\n * NOTE: values should not be modified directly - call the main GridStack API instead\n */\nexport class GridStackEngine {\n  public column: number;\n  public maxRow: number;\n  public nodes: GridStackNode[];\n  public addedNodes: GridStackNode[] = [];\n  public removedNodes: GridStackNode[] = [];\n  public batchMode: boolean;\n  /** @internal callback to update the DOM attributes */\n  protected onChange: OnChangeCB;\n  /** @internal */\n  protected _float: boolean;\n  /** @internal */\n  protected _prevFloat: boolean;\n  /** @internal cached layouts of difference column count so we can restore back (eg 12 -> 1 -> 12) */\n  protected _layouts?: GridStackNode[][]; // maps column # to array of values nodes\n  /** @internal true while we are resizing widgets during column resize to skip certain parts */\n  protected _inColumnResize: boolean;\n  /** @internal true if we have some items locked */\n  protected _hasLocked: boolean;\n  /** @internal unique global internal _id counter */\n  public static _idSeq = 0;\n\n  public constructor(opts: GridStackEngineOptions = {}) {\n    this.column = opts.column || 12;\n    this.maxRow = opts.maxRow;\n    this._float = opts.float;\n    this.nodes = opts.nodes || [];\n    this.onChange = opts.onChange;\n  }\n\n  public batchUpdate(flag = true, doPack = true): GridStackEngine {\n    if (!!this.batchMode === flag) return this;\n    this.batchMode = flag;\n    if (flag) {\n      this._prevFloat = this._float;\n      this._float = true; // let things go anywhere for now... will restore and possibly reposition later\n      this.saveInitial(); // since begin update (which is called multiple times) won't do this\n    } else {\n      this._float = this._prevFloat;\n      delete this._prevFloat;\n      if (doPack) this._packNodes();\n      this._notify();\n    }\n    return this;\n  }\n\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\n  protected _useEntireRowArea(node: GridStackNode, nn: GridStackPosition): boolean {\n    return (!this.float || this.batchMode && !this._prevFloat) && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\n  }\n\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\n   * return true if we moved. */\n  protected _fixCollisions(node: GridStackNode, nn = node, collide?: GridStackNode, opt: GridStackMoveOpts = {}): boolean {\n    this.sortNodes(-1); // from last to first, so recursive collision move items in the right order\n\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\n    if (!collide) return false;\n\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\n    if (node._moving && !opt.nested && !this.float) {\n      if (this.swap(node, collide)) return true;\n    }\n\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\n    let area = nn;\n    if (this._useEntireRowArea(node, nn)) {\n      area = {x: 0, w: this.column, y: nn.y, h: nn.h};\n      collide = this.collide(node, area, opt.skip); // force new hit\n    }\n\n    let didMove = false;\n    let newOpt: GridStackMoveOpts = {nested: true, pack: false};\n    while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\n      let moved: boolean;\n      // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\n      // but remember that skip down so we only do this once (and push others otherwise).\n      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\n        // can take space we had, or before where we're going\n        (!this.collide(collide, {...collide, y: node.y}, node) || !this.collide(collide, {...collide, y: nn.y - collide.h}, node))) {\n        node._skipDown = (node._skipDown || nn.y > node.y);\n        moved = this.moveNode(node, {...nn, y: collide.y + collide.h, ...newOpt});\n        if (collide.locked && moved) {\n          Utils.copyPos(nn, node); // moving after lock become our new desired location\n        } else if (!collide.locked && moved && opt.pack) {\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\n          this._packNodes();\n          nn.y = collide.y + collide.h;\n          Utils.copyPos(node, nn);\n        }\n        didMove = didMove || moved;\n      } else {\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\n        moved = this.moveNode(collide, {...collide, y: nn.y + nn.h, skip: node, ...newOpt});\n      }\n      if (!moved) { return didMove; } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\n      collide = undefined;\n    }\n    return didMove;\n  }\n\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\n  public collide(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode {\n    const skipId = skip._id;\n    const skip2Id = skip2?._id;\n    return this.nodes.find(n => n._id !== skipId && n._id !== skip2Id && Utils.isIntercepted(n, area));\n  }\n  public collideAll(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode[] {\n    const skipId = skip._id;\n    const skip2Id = skip2?._id;\n    return this.nodes.filter(n => n._id !== skipId && n._id !== skip2Id && Utils.isIntercepted(n, area));\n  }\n\n  /** does a pixel coverage collision based on where we started, returning the node that has the most coverage that is >50% mid line */\n  protected directionCollideCoverage(node: GridStackNode, o: GridStackMoveOpts, collides: GridStackNode[]): GridStackNode {\n    if (!o.rect || !node._rect) return;\n    let r0 = node._rect; // where started\n    let r = {...o.rect}; // where we are\n\n    // update dragged rect to show where it's coming from (above or below, etc...)\n    if (r.y > r0.y) {\n      r.h += r.y - r0.y;\n      r.y = r0.y;\n    } else {\n      r.h += r0.y - r.y;\n    }\n    if (r.x > r0.x) {\n      r.w += r.x - r0.x;\n      r.x = r0.x;\n    } else {\n      r.w += r0.x - r.x;\n    }\n\n    let collide: GridStackNode;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let r2 = n._rect; // overlapping target\n      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE, overMax = 0.5; // need >50%\n      // depending on which side we started from, compute the overlap % of coverage\n      // (ex: from above/below we only compute the max horizontal line coverage)\n      if (r0.y < r2.y) { // from above\n        yOver = ((r.y + r.h) - r2.y) / r2.h;\n      } else if (r0.y+r0.h > r2.y+r2.h) { // from below\n        yOver = ((r2.y + r2.h) - r.y) / r2.h;\n      }\n      if (r0.x < r2.x) { // from the left\n        xOver = ((r.x + r.w) - r2.x) / r2.w;\n      } else if (r0.x+r0.w > r2.x+r2.w) { // from the right\n        xOver = ((r2.x + r2.w) - r.x) / r2.w;\n      }\n      let over = Math.min(xOver, yOver);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    o.collide = collide; // save it so we don't have to find it again\n    return collide;\n  }\n\n  /** does a pixel coverage returning the node that has the most coverage by area */\n  /*\n  protected collideCoverage(r: GridStackPosition, collides: GridStackNode[]): {collide: GridStackNode, over: number} {\n    let collide: GridStackNode;\n    let overMax = 0;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let over = Utils.areaIntercept(r, n._rect);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    return {collide, over: overMax};\n  }\n  */\n\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\n  public cacheRects(w: number, h: number, top: number, right: number, bottom: number, left: number): GridStackEngine\n  {\n    this.nodes.forEach(n =>\n      n._rect = {\n        y: n.y * h + top,\n        x: n.x * w + left,\n        w: n.w * w - left - right,\n        h: n.h * h - top - bottom\n      }\n    );\n    return this;\n  }\n\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\n  public swap(a: GridStackNode, b: GridStackNode): boolean {\n    if (!b || b.locked || !a || a.locked) return false;\n\n    function _doSwap(): true { // assumes a is before b IFF they have different height (put after rather than exact swap)\n      let x = b.x, y = b.y;\n      b.x = a.x; b.y = a.y; // b -> a position\n      if (a.h != b.h) {\n        a.x = x; a.y = b.y + b.h; // a -> goes after b\n      } else if (a.w != b.w) {\n        a.x = b.x + b.w; a.y = y; // a -> goes after b\n      } else {\n        a.x = x; a.y = y; // a -> old b position\n      }\n      a._dirty = b._dirty = true;\n      return true;\n    }\n    let touching: boolean; // remember if we called it (vs undefined)\n\n    // same size and same row or column, and touching\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\n      return _doSwap();\n    if (touching === false) return; // IFF ran test and fail, bail out\n\n    // check for taking same columns (but different height) and touching\n    if (a.w === b.w && a.x === b.x && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.y < a.y) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    if (touching === false) return;\n\n    // check if taking same row (but different width) and touching\n    if (a.h === b.h && a.y === b.y && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.x < a.x) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    return false;\n  }\n\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\n    return !this.collide(nn);\n  }\n\n  /** re-layout grid items to reclaim any empty space - optionally keeping the sort order exactly the same ('list' mode) vs truly finding an empty spaces */\n  public compact(layout: CompactOptions = 'compact', doSort = true): GridStackEngine {\n    if (this.nodes.length === 0) return this;\n    if (doSort) this.sortNodes();\n    const wasBatch = this.batchMode;\n    if (!wasBatch) this.batchUpdate();\n    const wasColumnResize = this._inColumnResize;\n    if (!wasColumnResize) this._inColumnResize = true; // faster addNode()\n    let copyNodes = this.nodes;\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\n    copyNodes.forEach((n, index, list) => {\n      let after: GridStackNode;\n      if (!n.locked) {\n        n.autoPosition = true;\n        if (layout === 'list' && index) after = list[index - 1];\n      }\n      this.addNode(n, false, after); // 'false' for add event trigger\n    });\n    if (!wasColumnResize) delete this._inColumnResize;\n    if (!wasBatch) this.batchUpdate(false);\n    return this;\n  }\n\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\n  public set float(val: boolean) {\n    if (this._float === val) return;\n    this._float = val || false;\n    if (!val) {\n      this._packNodes()._notify();\n    }\n  }\n\n  /** float getter method */\n  public get float(): boolean { return this._float || false; }\n\n  /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */\n  public sortNodes(dir: 1 | -1 = 1, column = this.column): GridStackEngine {\n    this.nodes = Utils.sort(this.nodes, dir, column);\n    return this;\n  }\n\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\n  protected _packNodes(): GridStackEngine {\n    if (this.batchMode) { return this; }\n    this.sortNodes(); // first to last\n\n    if (this.float) {\n      // restore original Y pos\n      this.nodes.forEach(n => {\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\n        let newY = n.y;\n        while (newY > n._orig.y) {\n          --newY;\n          let collide = this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!collide) {\n            n._dirty = true;\n            n.y = newY;\n          }\n        }\n      });\n    } else {\n      // top gravity pack\n      this.nodes.forEach((n, i) => {\n        if (n.locked) return;\n        while (n.y > 0) {\n          let newY = i === 0 ? 0 : n.y - 1;\n          let canBeMoved = i === 0 || !this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!canBeMoved) break;\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\n          // and move items back. The user 'change' CB should detect changes from the original\n          // starting position instead.\n          n._dirty = (n.y !== newY);\n          n.y = newY;\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\n   * @param node to adjust\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\n   */\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\n    node = node || {};\n    node._id = node._id ?? GridStackEngine._idSeq++;\n\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\n      node.autoPosition = true;\n    }\n\n    // assign defaults for missing required fields\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\n    Utils.defaults(node, defaults);\n\n    if (!node.autoPosition) { delete node.autoPosition; }\n    if (!node.noResize) { delete node.noResize; }\n    if (!node.noMove) { delete node.noMove; }\n    Utils.sanitizeMinMax(node);\n\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\n    if (typeof node.x == 'string') { node.x = Number(node.x); }\n    if (typeof node.y == 'string') { node.y = Number(node.y); }\n    if (typeof node.w == 'string') { node.w = Number(node.w); }\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\n    if (isNaN(node.x)) { node.x = defaults.x; node.autoPosition = true; }\n    if (isNaN(node.y)) { node.y = defaults.y; node.autoPosition = true; }\n    if (isNaN(node.w)) { node.w = defaults.w; }\n    if (isNaN(node.h)) { node.h = defaults.h; }\n\n    return this.nodeBoundFix(node, resizing);\n  }\n\n  /** part2 of preparing a node to fit inside our grid - checks for x,y,w from grid dimensions */\n  public nodeBoundFix(node: GridStackNode, resizing?: boolean): GridStackNode {\n\n    let before = node._orig || Utils.copyPos({}, node);\n\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\n    if (node.minW && node.minW <= this.column) { node.w = Math.max(node.w, node.minW); }\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\n\n    // if user loaded a larger than allowed widget for current # of columns (or force 1 column mode),\n    // remember it's position & width so we can restore back (1 -> 12 column) #1655 #1985\n    // IFF we're not in the middle of column resizing!\n    const saveOrig = this.column === 1 || node.x + node.w > this.column;\n    if (saveOrig && this.column < 12 && !this._inColumnResize && node._id && this.findCacheLayout(node, 12) === -1) {\n      let copy = {...node}; // need _id + positions\n      if (copy.autoPosition) { delete copy.x; delete copy.y; }\n      else copy.x = Math.min(11, copy.x);\n      copy.w = Math.min(12, copy.w);\n      this.cacheOneLayout(copy, 12);\n    }\n\n    if (node.w > this.column) {\n      node.w = this.column;\n    } else if (node.w < 1) {\n      node.w = 1;\n    }\n\n    if (this.maxRow && node.h > this.maxRow) {\n      node.h = this.maxRow;\n    } else if (node.h < 1) {\n      node.h = 1;\n    }\n\n    if (node.x < 0) {\n      node.x = 0;\n    }\n    if (node.y < 0) {\n      node.y = 0;\n    }\n\n    if (node.x + node.w > this.column) {\n      if (resizing) {\n        node.w = this.column - node.x;\n      } else {\n        node.x = this.column - node.w;\n      }\n    }\n    if (this.maxRow && node.y + node.h > this.maxRow) {\n      if (resizing) {\n        node.h = this.maxRow - node.y;\n      } else {\n        node.y = this.maxRow - node.h;\n      }\n    }\n\n    if (!Utils.samePos(node, before)) {\n      node._dirty = true;\n    }\n\n    return node;\n  }\n\n  /** returns a list of modified nodes from their original values */\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\n    // compare original x,y,w,h instead as _dirty can be a temporary state\n    if (verify) {\n      return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\n    }\n    return this.nodes.filter(n => n._dirty);\n  }\n\n  /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */\n  protected _notify(removedNodes?: GridStackNode[]): GridStackEngine {\n    if (this.batchMode || !this.onChange) return this;\n    let dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());\n    this.onChange(dirtyNodes);\n    return this;\n  }\n\n  /** @internal remove dirty and last tried info */\n  public cleanNodes(): GridStackEngine {\n    if (this.batchMode) return this;\n    this.nodes.forEach(n => {\n      delete n._dirty;\n      delete n._lastTried;\n    });\n    return this;\n  }\n\n  /** @internal called to save initial position/size to track real dirty state.\n   * Note: should be called right after we call change event (so next API is can detect changes)\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\n  public saveInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      n._orig = Utils.copyPos({}, n);\n      delete n._dirty;\n    });\n    this._hasLocked = this.nodes.some(n => n.locked);\n    return this;\n  }\n\n  /** @internal restore all the nodes back to initial values (called when we leave) */\n  public restoreInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      if (Utils.samePos(n, n._orig)) return;\n      Utils.copyPos(n, n._orig);\n      n._dirty = true;\n    });\n    this._notify();\n    return this;\n  }\n\n  /** find the first available empty spot for the given node width/height, updating the x,y attributes. return true if found.\n   * optionally you can pass your own existing node list and column count, otherwise defaults to that engine data.\n   * Optionally pass a widget to start search AFTER, meaning the order will remain the same but possibly have empty slots we skipped\n   */\n  public findEmptyPosition(node: GridStackNode, nodeList = this.nodes, column = this.column, after?: GridStackNode): boolean {\n    let start = after ? after.y * column + (after.x + after.w) : 0;\n    let found = false;\n    for (let i = start; !found; ++i) {\n      let x = i % column;\n      let y = Math.floor(i / column);\n      if (x + node.w > column) {\n        continue;\n      }\n      let box = {x, y, w: node.w, h: node.h};\n      if (!nodeList.find(n => Utils.isIntercepted(box, n))) {\n        if (node.x !== x || node.y !== y) node._dirty = true;\n        node.x = x;\n        node.y = y;\n        delete node.autoPosition;\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /** call to add the given node to our list, fixing collision and re-packing */\n  public addNode(node: GridStackNode, triggerAddEvent = false, after?: GridStackNode): GridStackNode {\n    let dup = this.nodes.find(n => n._id === node._id);\n    if (dup) return dup; // prevent inserting twice! return it instead.\n\n    // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\n    node = this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\n    delete node._temporaryRemoved;\n    delete node._removeDOM;\n\n    let skipCollision: boolean;\n    if (node.autoPosition && this.findEmptyPosition(node, this.nodes, this.column, after)) {\n      delete node.autoPosition; // found our slot\n      skipCollision = true;\n    }\n\n    this.nodes.push(node);\n    if (triggerAddEvent) { this.addedNodes.push(node); }\n\n    if (!skipCollision) this._fixCollisions(node);\n    if (!this.batchMode) { this._packNodes()._notify(); }\n    return node;\n  }\n\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\n    if (!this.nodes.find(n => n._id === node._id)) {\n      // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\n      return this;\n    }\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\n      this.removedNodes.push(node);\n    }\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\n    this.nodes = this.nodes.filter(n => n._id !== node._id);\n    if (!node._isAboutToRemove) this._packNodes(); // if dragged out, no need to relayout as already done...\n    this._notify([node]);\n    return this;\n  }\n\n  public removeAll(removeDOM = true): GridStackEngine {\n    delete this._layouts;\n    if (!this.nodes.length) return this;\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    this.removedNodes = this.nodes;\n    this.nodes = [];\n    return this._notify(this.removedNodes);\n  }\n\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\n   * others in a clone first, then apply those changes if still within specs. */\n  public moveNodeCheck(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    // if (node.locked) return false;\n    if (!this.changedPosConstrain(node, o)) return false;\n    o.pack = true;\n\n    // simpler case: move item directly...\n    if (!this.maxRow) {\n      return this.moveNode(node, o);\n    }\n\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\n    let clonedNode: GridStackNode;\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {\n        if (n._id === node._id) {\n          clonedNode = {...n};\n          return clonedNode;\n        }\n        return {...n};\n      })\n    });\n    if (!clonedNode) return false;\n\n    // check if we're covering 50% collision and could move\n    let canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= this.maxRow;\n    // else check if we can force a swap (float=true, or different shapes) on non-resize\n    if (!canMove && !o.resizing && o.collide) {\n      let collide = o.collide.el.gridstackNode; // find the source node the clone collided with at 50%\n      if (this.swap(node, collide)) { // swaps and mark dirty\n        this._notify();\n        return true;\n      }\n    }\n    if (!canMove) return false;\n\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\n    // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\n    clone.nodes.filter(n => n._dirty).forEach(c => {\n      let n = this.nodes.find(a => a._id === c._id);\n      if (!n) return;\n      Utils.copyPos(n, c);\n      n._dirty = true;\n    });\n    this._notify();\n    return true;\n  }\n\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\n  public willItFit(node: GridStackNode): boolean {\n    delete node._willFitPos;\n    if (!this.maxRow) return true;\n    // create a clone with NO maxRow and check if still within size\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {return {...n}})\n    });\n    let n = {...node}; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\n    this.cleanupNode(n);\n    delete n.el; delete n._id; delete n.content; delete n.grid;\n    clone.addNode(n);\n    if (clone.getRow() <= this.maxRow) {\n      node._willFitPos = Utils.copyPos({}, n);\n      return true;\n    }\n    return false;\n  }\n\n  /** true if x,y or w,h are different after clamping to min/max */\n  public changedPosConstrain(node: GridStackNode, p: GridStackPosition): boolean {\n    // first make sure w,h are set for caller\n    p.w = p.w || node.w;\n    p.h = p.h || node.h;\n    if (node.x !== p.x || node.y !== p.y) return true;\n    // check constrained w,h\n    if (node.maxW) { p.w = Math.min(p.w, node.maxW); }\n    if (node.maxH) { p.h = Math.min(p.h, node.maxH); }\n    if (node.minW) { p.w = Math.max(p.w, node.minW); }\n    if (node.minH) { p.h = Math.max(p.h, node.minH); }\n    return (node.w !== p.w || node.h !== p.h);\n  }\n\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\n  public moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    if (!node || /*node.locked ||*/ !o) return false;\n    let wasUndefinedPack: boolean;\n    if (o.pack === undefined) {\n      wasUndefinedPack = o.pack = true;\n    }\n\n    // constrain the passed in values and check if we're still changing our node\n    if (typeof o.x !== 'number') { o.x = node.x; }\n    if (typeof o.y !== 'number') { o.y = node.y; }\n    if (typeof o.w !== 'number') { o.w = node.w; }\n    if (typeof o.h !== 'number') { o.h = node.h; }\n    let resizing = (node.w !== o.w || node.h !== o.h);\n    let nn: GridStackNode = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\n    Utils.copyPos(nn, o);\n    nn = this.nodeBoundFix(nn, resizing);\n    Utils.copyPos(o, nn);\n\n    if (Utils.samePos(node, o)) return false;\n    let prevPos: GridStackPosition = Utils.copyPos({}, node);\n\n    // check if we will need to fix collision at our new location\n    let collides = this.collideAll(node, nn, o.skip);\n    let needToMove = true;\n    if (collides.length) {\n      let activeDrag = node._moving && !o.nested;\n      // check to make sure we actually collided over 50% surface area while dragging\n      let collide = activeDrag ? this.directionCollideCoverage(node, o, collides) : collides[0];\n      // if we're enabling creation of sub-grids on the fly, see if we're covering 80% of either one, if we didn't already do that\n      if (activeDrag && collide && node.grid?.opts?.subGridDynamic && !node.grid._isTemp) {\n        let over = Utils.areaIntercept(o.rect, collide._rect);\n        let a1 = Utils.area(o.rect);\n        let a2 = Utils.area(collide._rect);\n        let perc = over / (a1 < a2 ? a1 : a2);\n        if (perc > .8) {\n          collide.grid.makeSubGrid(collide.el, undefined, node);\n          collide = undefined;\n        }\n      }\n\n      if (collide) {\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\n      } else {\n        needToMove = false; // we didn't cover >50% for a move, skip...\n        if (wasUndefinedPack) delete o.pack;\n      }\n    }\n\n    // now move (to the original ask vs the collision version which might differ) and repack things\n    if (needToMove) {\n      node._dirty = true;\n      Utils.copyPos(node, nn);\n    }\n    if (o.pack) {\n      this._packNodes()\n        ._notify();\n    }\n    return !Utils.samePos(node, prevPos); // pack might have moved things back\n  }\n\n  public getRow(): number {\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\n  }\n\n  public beginUpdate(node: GridStackNode): GridStackEngine {\n    if (!node._updating) {\n      node._updating = true;\n      delete node._skipDown;\n      if (!this.batchMode) this.saveInitial();\n    }\n    return this;\n  }\n\n  public endUpdate(): GridStackEngine {\n    let n = this.nodes.find(n => n._updating);\n    if (n) {\n      delete n._updating;\n      delete n._skipDown;\n    }\n    return this;\n  }\n\n  /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode) so we don't loose orig layout,\n   * returning a list of widgets for serialization */\n  public save(saveElement = true, saveCB?: SaveFcn): GridStackNode[] {\n    // use the highest layout for any saved info so we can have full detail on reload #1849\n    let len = this._layouts?.length;\n    let layout = len && this.column !== (len - 1) ? this._layouts[len - 1] : null;\n    let list: GridStackNode[] = [];\n    this.sortNodes();\n    this.nodes.forEach(n => {\n      let wl = layout?.find(l => l._id === n._id);\n      let w: GridStackNode = {...n};\n      // use layout info instead if set\n      if (wl) { w.x = wl.x; w.y = wl.y; w.w = wl.w; }\n      Utils.removeInternalForSave(w, !saveElement);\n      if (saveCB) saveCB(n, w);\n      list.push(w);\n    });\n    return list;\n  }\n\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\n    if (!this._layouts || this._inColumnResize) return this;\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\n    this._layouts.forEach((layout, column) => {\n      if (!layout || column === this.column) return this;\n      if (column < this.column) {\n        this._layouts[column] = undefined;\n      }\n      else {\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\n        // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\n        let ratio = column / this.column;\n        nodes.forEach(node => {\n          if (!node._orig) return; // didn't change (newly added ?)\n          let n = layout.find(l => l._id === node._id);\n          if (!n) return; // no cache for new nodes. Will use those values.\n          // Y changed, push down same amount\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\n          if (node.y !== node._orig.y) {\n            n.y += (node.y - node._orig.y);\n          }\n          // X changed, scale from new position\n          if (node.x !== node._orig.x) {\n            n.x = Math.round(node.x * ratio);\n          }\n          // width changed, scale from new width\n          if (node.w !== node._orig.w) {\n            n.w = Math.round(node.w * ratio);\n          }\n          // ...height always carries over from cache\n        });\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @internal Called to scale the widget width & position up/down based on the column change.\n   * Note we store previous layouts (especially original ones) to make it possible to go\n   * from say 12 -> 1 -> 12 and get back to where we were.\n   *\n   * @param prevColumn previous number of columns\n   * @param column  new column number\n   * @param nodes different sorted list (ex: DOM order) instead of current list\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\n   */\n  public columnChanged(prevColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\n    if (!this.nodes.length || !column || prevColumn === column) return this;\n\n    // simpler shortcuts layouts\n    const doCompact = layout === 'compact' || layout === 'list';\n    if (doCompact) {\n      this.sortNodes(1, prevColumn); // sort with original layout once and only once (new column will affect order otherwise)\n    }\n\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data IFF we're sizing down (see below)\n    if (column < prevColumn) this.cacheLayout(this.nodes, prevColumn);\n    this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\n    let newNodes: GridStackNode[] = [];\n    \n    // if we're going to 1 column and using DOM order (item passed in) rather than default sorting, then generate that layout\n    let domOrder = false;\n    if (column === 1 && nodes?.length) {\n      domOrder = true;\n      let top = 0;\n      nodes.forEach(n => {\n        n.x = 0;\n        n.w = 1;\n        n.y = Math.max(n.y, top);\n        top = n.y + n.h;\n      });\n      newNodes = nodes;\n      nodes = [];\n    } else {\n      nodes = doCompact ? this.nodes : Utils.sort(this.nodes, -1, prevColumn); // current column reverse sorting so we can insert last to front (limit collision)\n    }\n\n    // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\n    // generate next size down from where we are (looks more natural as you gradually size down).\n    if (column > prevColumn && this._layouts) {\n      const cacheNodes = this._layouts[column] || [];\n      // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\n      // by pretending we came from that larger column by assigning those values as starting point\n      let lastIndex = this._layouts.length - 1;\n      if (!cacheNodes.length && prevColumn !== lastIndex && this._layouts[lastIndex]?.length) {\n        prevColumn = lastIndex;\n        this._layouts[lastIndex].forEach(cacheNode => {\n          let n = nodes.find(n => n._id === cacheNode._id);\n          if (n) {\n            // still current, use cache info positions\n            if (!doCompact) {\n              n.x = cacheNode.x;\n              n.y = cacheNode.y;\n            }\n            n.w = cacheNode.w;\n          }\n        });\n      }\n\n      // if we found cache re-use those nodes that are still current\n      cacheNodes.forEach(cacheNode => {\n        let j = nodes.findIndex(n => n._id === cacheNode._id);\n        if (j !== -1) {\n          // still current, use cache info positions\n          if (doCompact) {\n            nodes[j].w = cacheNode.w; // only w is used, and don't trim the list\n            return;\n          }\n          if (cacheNode.autoPosition || isNaN(cacheNode.x) || isNaN(cacheNode.y)) {\n            this.findEmptyPosition(cacheNode, newNodes);\n          }\n          if (!cacheNode.autoPosition) {\n            nodes[j].x = cacheNode.x;\n            nodes[j].y = cacheNode.y;\n            nodes[j].w = cacheNode.w;\n            newNodes.push(nodes[j]);\n          }\n          nodes.splice(j, 1);\n        }\n      });\n    }\n\n    // much simpler layout that just compacts\n    if (doCompact) {\n      this.compact(layout, false);\n    } else {\n      // ...and add any extra non-cached ones\n      if (nodes.length) {\n        if (typeof layout === 'function') {\n          layout(column, prevColumn, newNodes, nodes);\n        } else if (!domOrder) {\n          let ratio = (doCompact || layout === 'none') ? 1 : column / prevColumn;\n          let move = (layout === 'move' || layout === 'moveScale');\n          let scale = (layout === 'scale' || layout === 'moveScale');\n          nodes.forEach(node => {\n            // NOTE: x + w could be outside of the grid, but addNode() below will handle that\n            node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\n            node.w = ((column === 1 || prevColumn === 1) ? 1 : scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\n            newNodes.push(node);\n          });\n          nodes = [];\n        }\n      }\n\n      // finally re-layout them in reverse order (to get correct placement)\n      if (!domOrder) newNodes = Utils.sort(newNodes, -1, column);\n      this._inColumnResize = true; // prevent cache update\n      this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\n      newNodes.forEach(node => {\n        this.addNode(node, false); // 'false' for add event trigger\n        delete node._orig; // make sure the commit doesn't try to restore things back to original\n      });\n    }\n    \n    this.nodes.forEach(n => delete n._orig); // clear _orig before batch=false so it doesn't handle float=true restore\n    this.batchUpdate(false, !doCompact);\n    delete this._inColumnResize;\n    return this;\n  }\n\n  /**\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\n   * @param nodes list of nodes\n   * @param column corresponding column index to save it under\n   * @param clear if true, will force other caches to be removed (default false)\n   */\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\n    let copy: GridStackNode[] = [];\n    nodes.forEach((n, i) => {\n      n._id = n._id ?? GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\n    });\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\n    this._layouts[column] = copy;\n    return this;\n  }\n\n  /**\n   * call to cache the given node layout internally to the given location so we can restore back when column changes size\n   * @param node single node to cache\n   * @param column corresponding column index to save it under\n   */\n  public cacheOneLayout(n: GridStackNode, column: number): GridStackEngine {\n    n._id = n._id ?? GridStackEngine._idSeq++;\n    let l: GridStackNode = {x: n.x, y: n.y, w: n.w, _id: n._id}\n    if (n.autoPosition) { delete l.x; delete l.y; l.autoPosition = true; }\n    this._layouts = this._layouts || [];\n    this._layouts[column] = this._layouts[column] || [];\n    let index = this.findCacheLayout(n, column);\n    if (index === -1)\n      this._layouts[column].push(l);\n    else\n      this._layouts[column][index] = l;\n    return this;\n  }\n\n  protected findCacheLayout(n: GridStackNode, column: number): number {\n    return this._layouts?.[column]?.findIndex(l => l._id === n._id) ?? -1;\n  }\n\n\n  /** called to remove all internal values but the _id */\n  public cleanupNode(node: GridStackNode): GridStackEngine {\n    for (let prop in node) {\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\n    }\n    return this;\n  }\n}\n","/**\r\n * types.ts 8.4.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStack } from './gridstack';\r\nimport { GridStackEngine } from './gridstack-engine';\r\n\r\n// default values for grid options - used during init and when saving out\r\nexport const gridDefaults: GridStackOptions = {\r\n  alwaysShowResizeHandle: 'mobile',\r\n  animate: true,\r\n  auto: true,\r\n  cellHeight: 'auto',\r\n  cellHeightThrottle: 100,\r\n  cellHeightUnit: 'px',\r\n  column: 12,\r\n  draggable: { handle: '.grid-stack-item-content', appendTo: 'body', scroll: true },\r\n  handle: '.grid-stack-item-content',\r\n  itemClass: 'grid-stack-item',\r\n  margin: 10,\r\n  marginUnit: 'px',\r\n  maxRow: 0,\r\n  minRow: 0,\r\n  oneColumnSize: 768,\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  removableOptions: { accept: 'grid-stack-item', decline: 'grid-stack-non-removable'},\r\n  resizable: { handles: 'se' },\r\n  rtl: 'auto',\r\n\r\n  // **** same as not being set ****\r\n  // disableDrag: false,\r\n  // disableOneColumnMode: false,\r\n  // disableResize: false,\r\n  // float: false,\r\n  // handleClass: null,\r\n  // oneColumnModeDomSort: false,\r\n  // removable: false,\r\n  // staticGrid: false,\r\n  // styleInHead: false,\r\n  //removable\r\n};\r\n\r\n/** default dragIn options */\r\nexport const dragInDefaultOptions: DDDragInOpt = {\r\n  handle: '.grid-stack-item-content',\r\n  appendTo: 'body',\r\n  // revert: 'invalid',\r\n  // scroll: false,\r\n};\r\n\r\n/** \r\n * different layout options when changing # of columns, including a custom function that takes new/old column count, and array of new/old positions\r\n * Note: new list may be partially already filled if we have a cache of the layout at that size and new items were added later.\r\n * Options are:\r\n * 'list' - treat items as sorted list, keeping items (un-sized unless too big for column count) sequentially reflowing them\r\n * 'compact' - similar to list, but using compact() method which will possibly re-order items if an empty slots are available due to a larger item needing to be pushed to next row\r\n * 'moveScale' - will scale and move items by the ratio new newColumnCount / oldColumnCount\r\n * 'move' | 'scale' - will only size or move items\r\n * 'none' will leave items unchanged, unless they don't fit in column count\r\n */\r\nexport type ColumnOptions = 'list' | 'compact' | 'moveScale' | 'move' | 'scale' | 'none' |\r\n  ((column: number, oldColumn: number, nodes: GridStackNode[], oldNodes: GridStackNode[]) => void);\r\nexport type CompactOptions = 'list' | 'compact';\r\nexport type numberOrString = number | string;\r\nexport interface GridItemHTMLElement extends HTMLElement {\r\n  /** pointer to grid node instance */\r\n  gridstackNode?: GridStackNode;\r\n  /** @internal */\r\n  _gridstackNodeOrig?: GridStackNode;\r\n}\r\n\r\nexport type GridStackElement = string | HTMLElement | GridItemHTMLElement;\r\n\r\n/** specific and general event handlers for the .on() method */\r\nexport type GridStackEventHandler = (event: Event) => void;\r\nexport type GridStackElementHandler = (event: Event, el: GridItemHTMLElement) => void;\r\nexport type GridStackNodesHandler = (event: Event, nodes: GridStackNode[]) => void;\r\nexport type GridStackDroppedHandler = (event: Event, previousNode: GridStackNode, newNode: GridStackNode) => void;\r\nexport type GridStackEventHandlerCallback = GridStackEventHandler | GridStackElementHandler | GridStackNodesHandler | GridStackDroppedHandler;\r\n\r\n/** optional function called during load() to callback the user on new added/remove grid items | grids */\r\nexport type AddRemoveFcn = (parent: HTMLElement, w: GridStackWidget, add: boolean, grid: boolean) => HTMLElement | undefined;\r\n\r\n/** optional function called during save() to let the caller add additional custom data to the GridStackWidget structure that will get returned */\r\nexport type SaveFcn = (node: GridStackNode, w: GridStackWidget) => void;\r\n\r\n\r\n/**\r\n * Defines the options for a Grid\r\n */\r\nexport interface GridStackOptions {\r\n  /**\r\n   * accept widgets dragged from other grids or from outside (default: `false`). Can be:\r\n   * `true` (uses `'.grid-stack-item'` class filter) or `false`,\r\n   * string for explicit class name,\r\n   * function returning a boolean. See [example](http://gridstack.github.io/gridstack.js/demo/two.html)\r\n   */\r\n  acceptWidgets?: boolean | string | ((element: Element) => boolean);\r\n\r\n  /** possible values (default: `mobile`) - does not apply to non-resizable widgets\r\n    * `false` the resizing handles are only shown while hovering over a widget\r\n    * `true` the resizing handles are always shown\r\n    * 'mobile' if running on a mobile device, default to `true` (since there is no hovering per say), else `false`.\r\n    See [example](http://gridstack.github.io/gridstack.js/demo/mobile.html) */\r\n  alwaysShowResizeHandle?: true | false | 'mobile';\r\n\r\n  /** turns animation on (default?: true) */\r\n  animate?: boolean;\r\n\r\n  /** if false gridstack will not initialize existing items (default?: true) */\r\n  auto?: boolean;\r\n\r\n  /**\r\n   * one cell height (default?: 'auto'). Can be:\r\n   *  an integer (px)\r\n   *  a string (ex: '100px', '10em', '10rem'). Note: % doesn't right - see demo/cell-height.html\r\n   *  0, in which case the library will not generate styles for rows. Everything must be defined in your own CSS files.\r\n   *  'auto' - height will be calculated for square cells (width / column) and updated live as you resize the window - also see `cellHeightThrottle`\r\n   *  'initial' - similar to 'auto' (start at square cells) but stay that size during window resizing.\r\n   */\r\n  cellHeight?: numberOrString;\r\n\r\n  /** throttle time delay (in ms) used when cellHeight='auto' to improve performance vs usability (default?: 100).\r\n   * A value of 0 will make it instant at a cost of re-creating the CSS file at ever window resize event!\r\n   * */\r\n  cellHeightThrottle?: number;\r\n\r\n  /** (internal) unit for cellHeight (default? 'px') which is set when a string cellHeight with a unit is passed (ex: '10rem') */\r\n  cellHeightUnit?: string;\r\n\r\n  /** list of children item to create when calling load() or addGrid() */\r\n  children?: GridStackWidget[];\r\n\r\n  /** number of columns (default?: 12). Note: IF you change this, CSS also have to change. See https://github.com/gridstack/gridstack.js#change-grid-columns.\r\n   * Note: for nested grids, it is recommended to use 'auto' which will always match the container grid-item current width (in column) to keep inside and outside\r\n   * items always to same. flag is not supported for regular non-nested grids.\r\n   */\r\n  column?: number | 'auto';\r\n\r\n  /** additional class on top of '.grid-stack' (which is required for our CSS) to differentiate this instance.\r\n  Note: only used by addGrid(), else your element should have the needed class */\r\n  class?: string;\r\n\r\n  /** disallows dragging of widgets (default?: false) */\r\n  disableDrag?: boolean;\r\n\r\n  /** disables the onColumnMode when the grid width is less than oneColumnSize (default?: false) */\r\n  disableOneColumnMode?: boolean;\r\n\r\n  /** disallows resizing of widgets (default?: false). */\r\n  disableResize?: boolean;\r\n\r\n  /** allows to override UI draggable options. (default?: { handle?: '.grid-stack-item-content', appendTo?: 'body' }) */\r\n  draggable?: DDDragOpt;\r\n\r\n  /** let user drag nested grid items out of a parent or not (default true - not supported yet) */\r\n  //dragOut?: boolean;\r\n\r\n  /** the type of engine to create (so you can subclass) default to GridStackEngine */\r\n  engineClass?: typeof GridStackEngine;\r\n\r\n  /** enable floating widgets (default?: false) See example (http://gridstack.github.io/gridstack.js/demo/float.html) */\r\n  float?: boolean;\r\n\r\n  /** draggable handle selector (default?: '.grid-stack-item-content') */\r\n  handle?: string;\r\n\r\n  /** draggable handle class (e.g. 'grid-stack-item-content'). If set 'handle' is ignored (default?: null) */\r\n  handleClass?: string;\r\n\r\n  /** additional widget class (default?: 'grid-stack-item') */\r\n  itemClass?: string;\r\n\r\n  /**\r\n   * gap between grid item and content (default?: 10). This will set all 4 sides and support the CSS formats below\r\n   *  an integer (px)\r\n   *  a string with possible units (ex: '2em', '20px', '2rem')\r\n   *  string with space separated values (ex: '5px 10px 0 20px' for all 4 sides, or '5em 10em' for top/bottom and left/right pairs like CSS).\r\n   * Note: all sides must have same units (last one wins, default px)\r\n   */\r\n  margin?: numberOrString;\r\n\r\n  /** OLD way to optionally set each side - use margin: '5px 10px 0 20px' instead. Used internally to store each side. */\r\n  marginTop?: numberOrString;\r\n  marginRight?: numberOrString;\r\n  marginBottom?: numberOrString;\r\n  marginLeft?: numberOrString;\r\n\r\n  /** (internal) unit for margin (default? 'px') set when `margin` is set as string with unit (ex: 2rem') */\r\n  marginUnit?: string;\r\n\r\n  /** maximum rows amount. Default? is 0 which means no maximum rows */\r\n  maxRow?: number;\r\n\r\n  /** minimum rows amount. Default is `0`. You can also do this with `min-height` CSS attribute\r\n   * on the grid div in pixels, which will round to the closest row.\r\n   */\r\n  minRow?: number;\r\n\r\n  /** If you are using a nonce-based Content Security Policy, pass your nonce here and\r\n   * GridStack will add it to the <style> elements it creates. */\r\n  nonce?: string;\r\n\r\n  /** minimal width before grid will be shown in one column mode (default?: 768) */\r\n  oneColumnSize?: number;\r\n\r\n  /**\r\n   * set to true if you want oneColumnMode to use the DOM order and ignore x,y from normal multi column\r\n   * layouts during sorting. This enables you to have custom 1 column layout that differ from the rest. (default?: false)\r\n   */\r\n  oneColumnModeDomSort?: boolean;\r\n\r\n  /** class for placeholder (default?: 'grid-stack-placeholder') */\r\n  placeholderClass?: string;\r\n\r\n  /** placeholder default content (default?: '') */\r\n  placeholderText?: string;\r\n\r\n  /** allows to override UI resizable options. (default?: { handles: 'se' }) */\r\n  resizable?: DDResizeOpt;\r\n\r\n  /**\r\n   * if true widgets could be removed by dragging outside of the grid. It could also be a selector string (ex: \".trash\"),\r\n   * in this case widgets will be removed by dropping them there (default?: false)\r\n   * See example (http://gridstack.github.io/gridstack.js/demo/two.html)\r\n   */\r\n  removable?: boolean | string;\r\n\r\n  /** allows to override UI removable options. (default?: { accept: '.grid-stack-item' }) */\r\n  removableOptions?: DDRemoveOpt;\r\n\r\n  /** fix grid number of rows. This is a shortcut of writing `minRow:N, maxRow:N`. (default `0` no constrain) */\r\n  row?: number;\r\n\r\n  /**\r\n   * if true turns grid to RTL. Possible values are true, false, 'auto' (default?: 'auto')\r\n   * See [example](http://gridstack.github.io/gridstack.js/demo/rtl.html)\r\n   */\r\n  rtl?: boolean | 'auto';\r\n\r\n  /**\r\n   * makes grid static (default?: false). If `true` widgets are not movable/resizable.\r\n   * You don't even need draggable/resizable. A CSS class\r\n   * 'grid-stack-static' is also added to the element.\r\n   */\r\n  staticGrid?: boolean;\r\n\r\n  /** if `true` will add style element to `<head>` otherwise will add it to element's parent node (default `false`). */\r\n  styleInHead?: boolean;\r\n\r\n  /** list of differences in options for automatically created sub-grids under us (inside our grid-items) */\r\n  subGridOpts?: GridStackOptions;\r\n\r\n  /** enable/disable the creation of sub-grids on the fly by dragging items completely\r\n   * over others (nest) vs partially (push). Forces `DDDragOpt.pause=true` to accomplish that. */\r\n  subGridDynamic?: boolean;\r\n}\r\n\r\n/** options used during GridStackEngine.moveNode() */\r\nexport interface GridStackMoveOpts extends GridStackPosition {\r\n  /** node to skip collision */\r\n  skip?: GridStackNode;\r\n  /** do we pack (default true) */\r\n  pack?: boolean;\r\n  /** true if we are calling this recursively to prevent simple swap or coverage collision - default false*/\r\n  nested?: boolean;\r\n  /** vars to calculate other cells coordinates */\r\n  cellWidth?: number;\r\n  cellHeight?: number;\r\n  marginTop?: number;\r\n  marginBottom?: number;\r\n  marginLeft?: number;\r\n  marginRight?: number;\r\n  /** position in pixels of the currently dragged items (for overlap check) */\r\n  rect?: GridStackPosition;\r\n  /** true if we're live resizing */\r\n  resizing?: boolean;\r\n  /** best node (most coverage) we collied with */\r\n  collide?: GridStackNode;\r\n}\r\n\r\nexport interface GridStackPosition {\r\n  /** widget position x (default?: 0) */\r\n  x?: number;\r\n  /** widget position y (default?: 0) */\r\n  y?: number;\r\n  /** widget dimension width (default?: 1) */\r\n  w?: number;\r\n  /** widget dimension height (default?: 1) */\r\n  h?: number;\r\n}\r\n\r\n/**\r\n * GridStack Widget creation options\r\n */\r\nexport interface GridStackWidget extends GridStackPosition {\r\n  /** if true then x, y parameters will be ignored and widget will be places on the first available position (default?: false) */\r\n  autoPosition?: boolean;\r\n  /** minimum width allowed during resize/creation (default?: undefined = un-constrained) */\r\n  minW?: number;\r\n  /** maximum width allowed during resize/creation (default?: undefined = un-constrained) */\r\n  maxW?: number;\r\n  /** minimum height allowed during resize/creation (default?: undefined = un-constrained) */\r\n  minH?: number;\r\n  /** maximum height allowed during resize/creation (default?: undefined = un-constrained) */\r\n  maxH?: number;\r\n  /** prevent resizing (default?: undefined = un-constrained) */\r\n  noResize?: boolean;\r\n  /** prevents moving (default?: undefined = un-constrained) */\r\n  noMove?: boolean;\r\n  /** prevents being moved by others during their (default?: undefined = un-constrained) */\r\n  locked?: boolean;\r\n  /** value for `gs-id` stored on the widget (default?: undefined) */\r\n  id?: string;\r\n  /** html to append inside as content */\r\n  content?: string;\r\n  /** optional nested grid options and list of children, which then turns into actual instance at runtime to get options from */\r\n  subGridOpts?: GridStackOptions;\r\n}\r\n\r\n/** Drag&Drop resize options */\r\nexport interface DDResizeOpt {\r\n  /** do resize handle hide by default until mouse over ? - default: true on desktop, false on mobile*/\r\n  autoHide?: boolean;\r\n  /**\r\n   * sides where you can resize from (ex: 'e, se, s, sw, w') - default 'se' (south-east)\r\n   * Note: it is not recommended to resize from the top sides as weird side effect may occur.\r\n  */\r\n  handles?: string;\r\n}\r\n\r\n/** Drag&Drop remove options */\r\nexport interface DDRemoveOpt {\r\n  /** class that can be removed (default?: opts.itemClass) */\r\n  accept?: string;\r\n  /** class that cannot be removed (default: 'grid-stack-non-removable') */\r\n  decline?: string;\r\n}\r\n\r\n/** Drag&Drop dragging options */\r\nexport interface DDDragOpt {\r\n  /** class selector of items that can be dragged. default to '.grid-stack-item-content' */\r\n  handle?: string;\r\n  /** default to 'body' */\r\n  appendTo?: string;\r\n  /** if set (true | msec), dragging placement (collision) will only happen after a pause by the user. Note: this is Global */\r\n  pause?: boolean | number;\r\n  /** default to `true` */\r\n  scroll?: boolean;\r\n  /** prevents dragging from starting on specified elements, listed as comma separated selectors (eg: '.no-drag'). default built in is 'input,textarea,button,select,option' */\r\n  cancel?: string;\r\n}\r\nexport interface DDDragInOpt extends DDDragOpt {\r\n  /** helper function when dropping: 'clone' or your own method */\r\n  helper?: 'clone' | ((event: Event) => HTMLElement);\r\n  /** used when dragging item from the outside, and canceling (ex: 'invalid' or your own method)*/\r\n  // revert?: string | ((event: Event) => HTMLElement);\r\n}\r\n\r\nexport interface Size {\r\n  width: number;\r\n  height: number;\r\n}\r\nexport interface Position {\r\n  top: number;\r\n  left: number;\r\n}\r\nexport interface Rect extends Size, Position {}\r\n\r\n/** data that is passed during drag and resizing callbacks */\r\nexport interface DDUIData {\r\n  position?: Position;\r\n  size?: Size;\r\n  draggable?: HTMLElement;\r\n  /* fields not used by GridStack but sent by jq ? leave in case we go back to them...\r\n  originalPosition? : Position;\r\n  offset?: Position;\r\n  originalSize?: Size;\r\n  element?: HTMLElement[];\r\n  helper?: HTMLElement[];\r\n  originalElement?: HTMLElement[];\r\n  */\r\n}\r\n\r\n/**\r\n * internal descriptions describing the items in the grid\r\n */\r\nexport interface GridStackNode extends GridStackWidget {\r\n  /** pointer back to HTML element */\r\n  el?: GridItemHTMLElement;\r\n  /** pointer back to parent Grid instance */\r\n  grid?: GridStack;\r\n  /** actual sub-grid instance */\r\n  subGrid?: GridStack;\r\n  /** @internal internal id used to match when cloning engines or saving column layouts */\r\n  _id?: number;\r\n  /** @internal */\r\n  _dirty?: boolean;\r\n  /** @internal */\r\n  _updating?: boolean;\r\n  /** @internal true when over trash/another grid so we don't bother removing drag CSS style that would animate back to old position */\r\n  _isAboutToRemove?: boolean;\r\n  /** @internal true if item came from outside of the grid -> actual item need to be moved over */\r\n  _isExternal?: boolean;\r\n  /** @internal Mouse event that's causing moving|resizing */\r\n  _event?: MouseEvent;\r\n  /** @internal moving vs resizing */\r\n  _moving?: boolean;\r\n  /** @internal true if we jumped down past item below (one time jump so we don't have to totally pass it) */\r\n  _skipDown?: boolean;\r\n  /** @internal original values before a drag/size */\r\n  _orig?: GridStackPosition;\r\n  /** @internal position in pixels used during collision check  */\r\n  _rect?: GridStackPosition;\r\n  /** @internal top/left pixel location before a drag so we can detect direction of move from last position*/\r\n  _lastUiPosition?: Position;\r\n  /** @internal set on the item being dragged/resized remember the last positions we've tried (but failed) so we don't try again during drag/resize */\r\n  _lastTried?: GridStackPosition;\r\n  /** @internal position willItFit() will use to position the item */\r\n  _willFitPos?: GridStackPosition;\r\n  /** @internal last drag Y pixel position used to incrementally update V scroll bar */\r\n  _prevYPix?: number;\r\n  /** @internal true if we've remove the item from ourself (dragging out) but might revert it back (release on nothing -> goes back) */\r\n  _temporaryRemoved?: boolean;\r\n  /** @internal true if we should remove DOM element on _notify() rather than clearing _id (old way) */\r\n  _removeDOM?: boolean;\r\n  /** @internal */\r\n  _initDD?: boolean;\r\n}\r\n","/**\n * dd-manager.ts 8.4.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDDroppable } from './dd-droppable';\nimport { DDResizable } from './dd-resizable';\n\n/**\n * globals that are shared across Drag & Drop instances\n */\nexport class DDManager {\n  /** if set (true | in msec), dragging placement (collision) will only happen after a pause by the user*/\n  public static pauseDrag: boolean | number;\n\n  /** true if a mouse down event was handled */\n  public static mouseHandled: boolean;\n\n  /** item being dragged */\n  public static dragElement: DDDraggable;\n\n  /** item we are currently over as drop target */\n  public static dropElement: DDDroppable;\n\n  /** current item we're over for resizing purpose (ignore nested grid resize handles) */\n  public static overResizeElement: DDResizable;\n\n}\n","/**\n * touch.ts 8.4.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\n\n/**\n * Detect touch support - Windows Surface devices and other touch devices\n * should we use this instead ? (what we had for always showing resize handles)\n * /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n */\nexport const isTouch: boolean = typeof window !== 'undefined' && typeof document !== 'undefined' &&\n( 'ontouchstart' in document\n  || 'ontouchstart' in window\n  // || !!window.TouchEvent // true on Windows 10 Chrome desktop so don't use this\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  || ((window as any).DocumentTouch && document instanceof (window as any).DocumentTouch)\n  || navigator.maxTouchPoints > 0\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  || (navigator as any).msMaxTouchPoints > 0\n);\n\n// interface TouchCoord {x: number, y: number};\n\nclass DDTouch {\n  public static touchHandled: boolean;\n  public static pointerLeaveTimeout: number;\n}\n\n/**\n* Get the x,y position of a touch event\n*/\n// function getTouchCoords(e: TouchEvent): TouchCoord {\n//   return {\n//     x: e.changedTouches[0].pageX,\n//     y: e.changedTouches[0].pageY\n//   };\n// }\n\n/**\n * Simulate a mouse event based on a corresponding touch event\n * @param {Object} e A touch event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulateMouseEvent(e: TouchEvent, simulatedType: string) {\n\n  // Ignore multi-touch events\n  if (e.touches.length > 1) return;\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const touch = e.changedTouches[0], simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    touch.screenX,    // screenX\n    touch.screenY,    // screenY\n    touch.clientX,    // clientX\n    touch.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n/**\n * Simulate a mouse event based on a corresponding Pointer event\n * @param {Object} e A pointer event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulatePointerMouseEvent(e: PointerEvent, simulatedType: string) {\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    e.screenX,    // screenX\n    e.screenY,    // screenY\n    e.clientX,    // clientX\n    e.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n\n/**\n * Handle the touchstart events\n * @param {Object} e The widget element's touchstart event\n */\nexport function touchstart(e: TouchEvent): void {\n  // Ignore the event if another widget is already being handled\n  if (DDTouch.touchHandled) return;\n  DDTouch.touchHandled = true;\n\n  // Simulate the mouse events\n  // simulateMouseEvent(e, 'mouseover');\n  // simulateMouseEvent(e, 'mousemove');\n  simulateMouseEvent(e, 'mousedown');\n}\n\n/**\n * Handle the touchmove events\n * @param {Object} e The document's touchmove event\n */\nexport function touchmove(e: TouchEvent): void {\n  // Ignore event if not handled by us\n  if (!DDTouch.touchHandled) return;\n\n  simulateMouseEvent(e, 'mousemove');\n}\n\n/**\n * Handle the touchend events\n * @param {Object} e The document's touchend event\n */\nexport function touchend(e: TouchEvent): void {\n\n  // Ignore event if not handled\n  if (!DDTouch.touchHandled) return;\n\n  // cancel delayed leave event when we release on ourself which happens BEFORE we get this!\n  if (DDTouch.pointerLeaveTimeout) {\n    window.clearTimeout(DDTouch.pointerLeaveTimeout);\n    delete DDTouch.pointerLeaveTimeout;\n  }\n\n  const wasDragging = !!DDManager.dragElement;\n\n  // Simulate the mouseup event\n  simulateMouseEvent(e, 'mouseup');\n  // simulateMouseEvent(event, 'mouseout');\n\n  // If the touch interaction did not move, it should trigger a click\n  if (!wasDragging) {\n    simulateMouseEvent(e, 'click');\n  }\n\n  // Unset the flag to allow other widgets to inherit the touch event\n  DDTouch.touchHandled = false;\n}\n\n/**\n * Note we don't get touchenter/touchleave (which are deprecated)\n * see https://stackoverflow.com/questions/27908339/js-touch-equivalent-for-mouseenter\n * so instead of PointerEvent to still get enter/leave and send the matching mouse event.\n */\nexport function pointerdown(e: PointerEvent): void {\n  // console.log(\"pointer down\")\n  (e.target as HTMLElement).releasePointerCapture(e.pointerId) // <- Important!\n}\n\nexport function pointerenter(e: PointerEvent): void {\n  // ignore the initial one we get on pointerdown on ourself\n  if (!DDManager.dragElement) {\n    // console.log('pointerenter ignored');\n    return;\n  }\n  // console.log('pointerenter');\n  simulatePointerMouseEvent(e, 'mouseenter');\n}\n\nexport function pointerleave(e: PointerEvent): void {\n  // ignore the leave on ourself we get before releasing the mouse over ourself\n  // by delaying sending the event and having the up event cancel us\n  if (!DDManager.dragElement) {\n    // console.log('pointerleave ignored');\n    return;\n  }\n  DDTouch.pointerLeaveTimeout = window.setTimeout(() => {\n    delete DDTouch.pointerLeaveTimeout;\n    // console.log('pointerleave delayed');\n    simulatePointerMouseEvent(e, 'mouseleave');\n  }, 10);\n}\n\n","/**\n * dd-resizable-handle.ts 8.4.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { isTouch, pointerdown, touchend, touchmove, touchstart } from './dd-touch';\n\nexport interface DDResizableHandleOpt {\n  start?: (event) => void;\n  move?: (event) => void;\n  stop?: (event) => void;\n}\n\nexport class DDResizableHandle {\n  /** @internal */\n  protected el: HTMLElement;\n  /** @internal */\n  protected host: HTMLElement;\n  /** @internal */\n  protected option: DDResizableHandleOpt;\n  /** @internal */\n  protected dir: string;\n  /** @internal true after we've moved enough pixels to start a resize */\n  protected moving = false;\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected static prefix = 'ui-resizable-';\n\n  constructor(host: HTMLElement, direction: string, option: DDResizableHandleOpt) {\n    this.host = host;\n    this.dir = direction;\n    this.option = option;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n\n    this._init();\n  }\n\n  /** @internal */\n  protected _init(): DDResizableHandle {\n    const el = document.createElement('div');\n    el.classList.add('ui-resizable-handle');\n    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n    el.style.zIndex = '100';\n    el.style.userSelect = 'none';\n    this.el = el;\n    this.host.appendChild(this.el);\n    this.el.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.addEventListener('touchstart', touchstart);\n      this.el.addEventListener('pointerdown', pointerdown);\n      // this.el.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    return this;\n  }\n\n  /** call this when resize handle needs to be removed and cleaned up */\n  public destroy(): DDResizableHandle {\n    if (this.moving) this._mouseUp(this.mouseDownEvent);\n    this.el.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.removeEventListener('touchstart', touchstart);\n      this.el.removeEventListener('pointerdown', pointerdown);\n    }\n    this.host.removeChild(this.el);\n    delete this.el;\n    delete this.host;\n    return this;\n  }\n\n  /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\n  protected _mouseDown(e: MouseEvent): void {\n    this.mouseDownEvent = e;\n    document.addEventListener('mousemove', this._mouseMove, true); // capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.addEventListener('touchmove', touchmove);\n      this.el.addEventListener('touchend', touchend);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseMove(e: MouseEvent): void {\n    let s = this.mouseDownEvent;\n    if (this.moving) {\n      this._triggerEvent('move', e);\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\n      // don't start unless we've moved at least 3 pixels\n      this.moving = true;\n      this._triggerEvent('start', this.mouseDownEvent);\n      this._triggerEvent('move', e);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseUp(e: MouseEvent): void {\n    if (this.moving) {\n      this._triggerEvent('stop', e);\n    }\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.removeEventListener('touchmove', touchmove);\n      this.el.removeEventListener('touchend', touchend);\n    }\n    delete this.moving;\n    delete this.mouseDownEvent;\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _triggerEvent(name: string, event: MouseEvent): DDResizableHandle {\n    if (this.option[name]) this.option[name](event);\n    return this;\n  }\n}\n","/**\n * dd-base-impl.ts 8.4.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nexport type EventCallback = (event: Event) => boolean|void;\nexport abstract class DDBaseImplement {\n  /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\n  public get disabled(): boolean   { return this._disabled; }\n\n  /** @internal */\n  protected _disabled: boolean; // initial state to differentiate from false\n  /** @internal */\n  protected _eventRegister: {\n    [eventName: string]: EventCallback;\n  } = {};\n\n  public on(event: string, callback: EventCallback): void {\n    this._eventRegister[event] = callback;\n  }\n\n  public off(event: string): void {\n    delete this._eventRegister[event];\n  }\n\n  public enable(): void {\n    this._disabled = false;\n  }\n\n  public disable(): void {\n    this._disabled = true;\n  }\n\n  public destroy(): void {\n    delete this._eventRegister;\n  }\n\n  public triggerEvent(eventName: string, event: Event): boolean|void {\n    if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\n      return this._eventRegister[eventName](event);\n  }\n}\n\nexport interface HTMLElementExtendOpt<T> {\n  el: HTMLElement;\n  option: T;\n  updateOption(T): DDBaseImplement;\n}\n","/**\n * dd-resizable.ts 8.4.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizableHandle } from './dd-resizable-handle';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDUIData, Rect, Size } from './types';\nimport { DDManager } from './dd-manager';\n\n// import { GridItemHTMLElement } from './types'; let count = 0; // TEST\n\n// TODO: merge with DDDragOpt\nexport interface DDResizableOpt {\n  autoHide?: boolean;\n  handles?: string;\n  maxHeight?: number;\n  maxWidth?: number;\n  minHeight?: number;\n  minWidth?: number;\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  resize?: (event: Event, ui: DDUIData) => void;\n}\n\nexport class DDResizable extends DDBaseImplement implements HTMLElementExtendOpt<DDResizableOpt> {\n\n  // have to be public else complains for HTMLElementExtendOpt ?\n  public el: HTMLElement;\n  public option: DDResizableOpt;\n\n  /** @internal */\n  protected handlers: DDResizableHandle[];\n  /** @internal */\n  protected originalRect: Rect;\n  /** @internal */\n  protected temporalRect: Rect;\n  /** @internal */\n  protected scrollY: number;\n  /** @internal */\n  protected scrolled: number;\n  /** @internal */\n  protected scrollEl: HTMLElement;\n  /** @internal */\n  protected startEvent: MouseEvent;\n  /** @internal value saved in the same order as _originStyleProp[] */\n  protected elOriginStyleVal: string[];\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected static _originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\n\n  constructor(el: HTMLElement, opts: DDResizableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseOver = this._mouseOver.bind(this);\n    this._mouseOut = this._mouseOut.bind(this);\n    this.enable();\n    this._setupAutoHide(this.option.autoHide);\n    this._setupHandlers();\n  }\n\n  public on(event: 'resizestart' | 'resize' | 'resizestop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'resizestart' | 'resize' | 'resizestop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.el.classList.remove('ui-resizable-disabled');\n    this._setupAutoHide(this.option.autoHide);\n  }\n\n  public disable(): void {\n    super.disable();\n    this.el.classList.add('ui-resizable-disabled');\n    this._setupAutoHide(false);\n  }\n\n  public destroy(): void {\n    this._removeHandlers();\n    this._setupAutoHide(false);\n    delete this.el;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDResizableOpt): DDResizable {\n    let updateHandles = (opts.handles && opts.handles !== this.option.handles);\n    let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    if (updateHandles) {\n      this._removeHandlers();\n      this._setupHandlers();\n    }\n    if (updateAutoHide) {\n      this._setupAutoHide(this.option.autoHide);\n    }\n    return this;\n  }\n\n  /** @internal turns auto hide on/off */\n  protected _setupAutoHide(auto: boolean): DDResizable {\n    if (auto) {\n      this.el.classList.add('ui-resizable-autohide');\n      // use mouseover and not mouseenter to get better performance and track for nested cases\n      this.el.addEventListener('mouseover', this._mouseOver);\n      this.el.addEventListener('mouseout', this._mouseOut);\n    } else {\n      this.el.classList.remove('ui-resizable-autohide');\n      this.el.removeEventListener('mouseover', this._mouseOver);\n      this.el.removeEventListener('mouseout', this._mouseOut);\n      if (DDManager.overResizeElement === this) {\n        delete DDManager.overResizeElement;\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _mouseOver(e: Event): void {\n    // console.log(`${count++} pre-enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    // already over a child, ignore. Ideally we just call e.stopPropagation() but see https://github.com/gridstack/gridstack.js/issues/2018\n    if (DDManager.overResizeElement || DDManager.dragElement) return;\n    DDManager.overResizeElement = this;\n    // console.log(`${count++} enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    this.el.classList.remove('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _mouseOut(e: Event): void {\n    // console.log(`${count++} pre-leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    if (DDManager.overResizeElement !== this) return;\n    delete DDManager.overResizeElement;\n    // console.log(`${count++} leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    this.el.classList.add('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  protected _setupHandlers(): DDResizable {\n    let handlerDirection = this.option.handles || 'e,s,se';\n    if (handlerDirection === 'all') {\n      handlerDirection = 'n,e,s,w,se,sw,ne,nw';\n    }\n    this.handlers = handlerDirection.split(',')\n      .map(dir => dir.trim())\n      .map(dir => new DDResizableHandle(this.el, dir, {\n        start: (event: MouseEvent) => {\n          this._resizeStart(event);\n        },\n        stop: (event: MouseEvent) => {\n          this._resizeStop(event);\n        },\n        move: (event: MouseEvent) => {\n          this._resizing(event, dir);\n        }\n      }));\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStart(event: MouseEvent): DDResizable {\n    this.originalRect = this.el.getBoundingClientRect();\n    this.scrollEl = Utils.getScrollElement(this.el);\n    this.scrollY = this.scrollEl.scrollTop;\n    this.scrolled = 0;\n    this.startEvent = event;\n    this._setupHelper();\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestart', target: this.el });\n    if (this.option.start) {\n      this.option.start(ev, this._ui());\n    }\n    this.el.classList.add('ui-resizable-resizing');\n    this.triggerEvent('resizestart', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizing(event: MouseEvent, dir: string): DDResizable {\n    this.scrolled = this.scrollEl.scrollTop - this.scrollY;\n    this.temporalRect = this._getChange(event, dir);\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resize', target: this.el });\n    if (this.option.resize) {\n      this.option.resize(ev, this._ui());\n    }\n    this.triggerEvent('resize', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStop(event: MouseEvent): DDResizable {\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestop', target: this.el });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.el.classList.remove('ui-resizable-resizing');\n    this.triggerEvent('resizestop', ev);\n    this._cleanHelper();\n    delete this.startEvent;\n    delete this.originalRect;\n    delete this.temporalRect;\n    delete this.scrollY;\n    delete this.scrolled;\n    return this;\n  }\n\n  /** @internal */\n  protected _setupHelper(): DDResizable {\n    this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\n    this.parentOriginStylePosition = this.el.parentElement.style.position;\n    if (window.getComputedStyle(this.el.parentElement).position.match(/static/)) {\n      this.el.parentElement.style.position = 'relative';\n    }\n    this.el.style.position = 'absolute';\n    this.el.style.opacity = '0.8';\n    return this;\n  }\n\n  /** @internal */\n  protected _cleanHelper(): DDResizable {\n    DDResizable._originStyleProp.forEach((prop, i) => {\n      this.el.style[prop] = this.elOriginStyleVal[i] || null;\n    });\n    this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n    return this;\n  }\n\n  /** @internal */\n  protected _getChange(event: MouseEvent, dir: string): Rect {\n    const oEvent = this.startEvent;\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n\n    const offsetX = event.clientX - oEvent.clientX;\n    const offsetY = event.clientY - oEvent.clientY;\n\n    if (dir.indexOf('e') > -1) {\n      newRect.width += offsetX;\n    } else if (dir.indexOf('w') > -1) {\n      newRect.width -= offsetX;\n      newRect.left += offsetX;\n    }\n    if (dir.indexOf('s') > -1) {\n      newRect.height += offsetY;\n    } else if (dir.indexOf('n') > -1) {\n      newRect.height -= offsetY;\n      newRect.top += offsetY\n    }\n    const constrain = this._constrainSize(newRect.width, newRect.height);\n    if (Math.round(newRect.width) !== Math.round(constrain.width)) { // round to ignore slight round-off errors\n      if (dir.indexOf('w') > -1) {\n        newRect.left += newRect.width - constrain.width;\n      }\n      newRect.width = constrain.width;\n    }\n    if (Math.round(newRect.height) !== Math.round(constrain.height)) {\n      if (dir.indexOf('n') > -1) {\n        newRect.top += newRect.height - constrain.height;\n      }\n      newRect.height = constrain.height;\n    }\n    return newRect;\n  }\n\n  /** @internal constrain the size to the set min/max values */\n  protected _constrainSize(oWidth: number, oHeight: number): Size {\n    const maxWidth = this.option.maxWidth || Number.MAX_SAFE_INTEGER;\n    const minWidth = this.option.minWidth || oWidth;\n    const maxHeight = this.option.maxHeight || Number.MAX_SAFE_INTEGER;\n    const minHeight = this.option.minHeight || oHeight;\n    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n    return { width, height };\n  }\n\n  /** @internal */\n  protected _applyChange(): DDResizable {\n    let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\n    if (this.el.style.position === 'absolute') {\n      const containmentEl = this.el.parentElement;\n      const { left, top } = containmentEl.getBoundingClientRect();\n      containmentRect = { left, top, width: 0, height: 0 };\n    }\n    if (!this.temporalRect) return this;\n    Object.keys(this.temporalRect).forEach(key => {\n      const value = this.temporalRect[key];\n      this.el.style[key] = value - containmentRect[key] + 'px';\n    });\n    return this;\n  }\n\n  /** @internal */\n  protected _removeHandlers(): DDResizable {\n    this.handlers.forEach(handle => handle.destroy());\n    delete this.handlers;\n    return this;\n  }\n\n  /** @internal */\n  protected _ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    const rect = this.temporalRect || newRect;\n    return {\n      position: {\n        left: rect.left - containmentRect.left,\n        top: rect.top - containmentRect.top\n      },\n      size: {\n        width: rect.width,\n        height: rect.height\n      }\n      /* Gridstack ONLY needs position set above... keep around in case.\n      element: [this.el], // The object representing the element to be resized\n      helper: [], // TODO: not support yet - The object representing the helper that's being resized\n      originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\n      originalPosition: { // The position represented as { left, top } before the resizable is resized\n        left: this.originalRect.left - containmentRect.left,\n        top: this.originalRect.top - containmentRect.top\n      },\n      originalSize: { // The size represented as { width, height } before the resizable is resized\n        width: this.originalRect.width,\n        height: this.originalRect.height\n      }\n      */\n    };\n  }\n}\n","/**\n * dd-draggable.ts 8.4.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\nimport { Utils } from './utils';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { GridItemHTMLElement, DDUIData } from './types';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, touchend, touchmove, touchstart, pointerdown } from './dd-touch';\n\n// TODO: merge with DDDragOpt ?\nexport interface DDDraggableOpt {\n  appendTo?: string | HTMLElement;\n  handle?: string;\n  helper?: 'clone' | HTMLElement | ((event: Event) => HTMLElement);\n  cancel?: string;\n  // containment?: string | HTMLElement; // TODO: not implemented yet\n  // revert?: string | boolean | unknown; // TODO: not implemented yet\n  // scroll?: boolean;\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  drag?: (event: Event, ui: DDUIData) => void;\n}\n\ninterface DragOffset {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n  offsetLeft: number;\n  offsetTop: number;\n}\n\ntype DDDragEvent = 'drag' | 'dragstart' | 'dragstop';\n\n// make sure we are not clicking on known object that handles mouseDown\nconst skipMouseDown = 'input,textarea,button,select,option,[contenteditable=\"true\"],.ui-resizable-handle';\n\n// let count = 0; // TEST\n\nexport class DDDraggable extends DDBaseImplement implements HTMLElementExtendOpt<DDDraggableOpt> {\n  public el: HTMLElement;\n  public option: DDDraggableOpt;\n  public helper: HTMLElement; // used by GridStackDDNative\n\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected dragOffset: DragOffset;\n  /** @internal */\n  protected dragElementOriginStyle: Array<string>;\n  /** @internal */\n  protected dragEl: HTMLElement;\n  /** @internal true while we are dragging an item around */\n  protected dragging: boolean;\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected helperContainment: HTMLElement;\n  /** @internal properties we change during dragging, and restore back */\n  protected static originStyleProp = ['transition', 'pointerEvents', 'position', 'left', 'top', 'minWidth', 'willChange'];\n  /** @internal pause before we call the actual drag hit collision code */\n  protected dragTimeout: number;\n\n  constructor(el: HTMLElement, option: DDDraggableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = option;\n\n    // get the element that is actually supposed to be dragged by\n    let handleName = option.handle.substring(1);\n    this.dragEl = el.classList.contains(handleName) ? el : el.querySelector(option.handle) || el;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n    this.enable();\n  }\n\n  public on(event: DDDragEvent, callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: DDDragEvent): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.dragEl.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.dragEl.addEventListener('touchstart', touchstart);\n      this.dragEl.addEventListener('pointerdown', pointerdown);\n      // this.dragEl.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    this.el.classList.remove('ui-draggable-disabled');\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.dragEl.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.dragEl.removeEventListener('touchstart', touchstart);\n      this.dragEl.removeEventListener('pointerdown', pointerdown);\n    }\n    if (!forDestroy) this.el.classList.add('ui-draggable-disabled');\n  }\n\n  public destroy(): void {\n    if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\n    delete this.dragTimeout;\n    if (this.dragging) this._mouseUp(this.mouseDownEvent);\n    this.disable(true);\n    delete this.el;\n    delete this.helper;\n    delete this.option;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDraggableOpt): DDDraggable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    return this;\n  }\n\n  /** @internal call when mouse goes down before a dragstart happens */\n  protected _mouseDown(e: MouseEvent): boolean {\n    // don't let more than one widget handle mouseStart\n    if (DDManager.mouseHandled) return;\n    if (e.button !== 0) return true; // only left click\n\n    // make sure we are not clicking on known object that handles mouseDown, or ones supplied by the user\n    if ((e.target as HTMLElement).closest(skipMouseDown)) return true;\n    if (this.option.cancel) {\n      if ((e.target as HTMLElement).closest(this.option.cancel)) return true;\n    }\n\n    // REMOVE: why would we get the event if it wasn't for us or child ?\n    // make sure we are clicking on a drag handle or child of it...\n    // Note: we don't need to check that's handle is an immediate child, as mouseHandled will prevent parents from also handling it (lowest wins)\n    // let className = this.option.handle.substring(1);\n    // let el = e.target as HTMLElement;\n    // while (el && !el.classList.contains(className)) { el = el.parentElement; }\n    // if (!el) return;\n\n    this.mouseDownEvent = e;\n    delete this.dragging;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    // document handler so we can continue receiving moves as the item is 'fixed' position, and capture=true so WE get a first crack\n    document.addEventListener('mousemove', this._mouseMove, true); // true=capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.dragEl.addEventListener('touchmove', touchmove);\n      this.dragEl.addEventListener('touchend', touchend);\n    }\n\n    e.preventDefault();\n    // preventDefault() prevents blur event which occurs just after mousedown event.\n    // if an editable content has focus, then blur must be call\n    if (document.activeElement) (document.activeElement as HTMLElement).blur();\n\n    DDManager.mouseHandled = true;\n    return true;\n  }\n\n  /** @internal method to call actual drag event */\n  protected _callDrag(e: DragEvent): void {\n    if (!this.dragging) return;\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drag' });\n    if (this.option.drag) {\n      this.option.drag(ev, this.ui());\n    }\n    this.triggerEvent('drag', ev);\n  }\n\n  /** @internal called when the main page (after successful mousedown) receives a move event to drag the item around the screen */\n  protected _mouseMove(e: DragEvent): boolean {\n    // console.log(`${count++} move ${e.x},${e.y}`)\n    let s = this.mouseDownEvent;\n\n    if (this.dragging) {\n      this._dragFollow(e);\n      // delay actual grid handling drag until we pause for a while if set\n      if (DDManager.pauseDrag) {\n        const pause = Number.isInteger(DDManager.pauseDrag) ? DDManager.pauseDrag as number : 100;\n        if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\n        this.dragTimeout = window.setTimeout(() => this._callDrag(e), pause);\n      } else {\n        this._callDrag(e);\n      }\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 3) {\n      /**\n       * don't start unless we've moved at least 3 pixels\n       */\n      this.dragging = true;\n      DDManager.dragElement = this;\n      // if we're dragging an actual grid item, set the current drop as the grid (to detect enter/leave)\n      let grid = (this.el as GridItemHTMLElement).gridstackNode?.grid;\n      if (grid) {\n        DDManager.dropElement = (grid.el as DDElementHost).ddElement.ddDroppable;\n      } else {\n        delete DDManager.dropElement;\n      }\n      this.helper = this._createHelper(e);\n      this._setupHelperContainmentStyle();\n      this.dragOffset = this._getDragOffset(e, this.el, this.helperContainment);\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstart' });\n\n      this._setupHelperStyle(e);\n      if (this.option.start) {\n        this.option.start(ev, this.ui());\n      }\n      this.triggerEvent('dragstart', ev);\n    }\n    e.preventDefault(); // needed otherwise we get text sweep text selection as we drag around\n    return true;\n  }\n\n  /** @internal call when the mouse gets released to drop the item at current location */\n  protected _mouseUp(e: MouseEvent): void {\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.dragEl.removeEventListener('touchmove', touchmove, true);\n      this.dragEl.removeEventListener('touchend', touchend, true);\n    }\n    if (this.dragging) {\n      delete this.dragging;\n\n      // reset the drop target if dragging over ourself (already parented, just moving during stop callback below)\n      if (DDManager.dropElement?.el === this.el.parentElement) {\n        delete DDManager.dropElement;\n      }\n\n      this.helperContainment.style.position = this.parentOriginStylePosition || null;\n      if (this.helper === this.el) {\n        this._removeHelperStyle();\n      } else {\n        this.helper.remove();\n      }\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstop' });\n      if (this.option.stop) {\n        this.option.stop(ev); // NOTE: destroy() will be called when removing item, so expect NULL ptr after!\n      }\n      this.triggerEvent('dragstop', ev);\n\n      // call the droppable method to receive the item\n      if (DDManager.dropElement) {\n        DDManager.dropElement.drop(e);\n      }\n    }\n    delete this.helper;\n    delete this.mouseDownEvent;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    delete DDManager.mouseHandled;\n    e.preventDefault();\n  }\n\n  /** @internal create a clone copy (or user defined method) of the original drag item if set */\n  protected _createHelper(event: DragEvent): HTMLElement {\n    let helper = this.el;\n    if (typeof this.option.helper === 'function') {\n      helper = this.option.helper(event);\n    } else if (this.option.helper === 'clone') {\n      helper = Utils.cloneNode(this.el);\n    }\n    if (!document.body.contains(helper)) {\n      Utils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentElement : this.option.appendTo);\n    }\n    if (helper === this.el) {\n      this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\n    }\n    return helper;\n  }\n\n  /** @internal set the fix position of the dragged item */\n  protected _setupHelperStyle(e: DragEvent): DDDraggable {\n    this.helper.classList.add('ui-draggable-dragging');\n    // TODO: set all at once with style.cssText += ... ? https://stackoverflow.com/questions/3968593\n    const style = this.helper.style;\n    style.pointerEvents = 'none'; // needed for over items to get enter/leave\n    // style.cursor = 'move'; //  TODO: can't set with pointerEvents=none ! (done in CSS as well)\n    style.width = this.dragOffset.width + 'px';\n    style.height = this.dragOffset.height + 'px';\n    style.willChange = 'left, top';\n    style.position = 'fixed'; // let us drag between grids by not clipping as parent .grid-stack is position: 'relative'\n    this._dragFollow(e); // now position it\n    style.transition = 'none'; // show up instantly\n    setTimeout(() => {\n      if (this.helper) {\n        style.transition = null; // recover animation\n      }\n    }, 0);\n    return this;\n  }\n\n  /** @internal restore back the original style before dragging */\n  protected _removeHelperStyle(): DDDraggable {\n    this.helper.classList.remove('ui-draggable-dragging');\n    let node = (this.helper as GridItemHTMLElement)?.gridstackNode;\n    // don't bother restoring styles if we're gonna remove anyway...\n    if (!node?._isAboutToRemove && this.dragElementOriginStyle) {\n      let helper = this.helper;\n      // don't animate, otherwise we animate offseted when switching back to 'absolute' from 'fixed'.\n      // TODO: this also removes resizing animation which doesn't have this issue, but others.\n      // Ideally both would animate ('move' would immediately restore 'absolute' and adjust coordinate to match,\n      // then trigger a delay (repaint) to restore to final dest with animate) but then we need to make sure 'resizestop'\n      // is called AFTER 'transitionend' event is received (see https://github.com/gridstack/gridstack.js/issues/2033)\n      let transition = this.dragElementOriginStyle['transition'] || null;\n      helper.style.transition = this.dragElementOriginStyle['transition'] = 'none'; // can't be NULL #1973\n      DDDraggable.originStyleProp.forEach(prop => helper.style[prop] = this.dragElementOriginStyle[prop] || null);\n      setTimeout(() => helper.style.transition = transition, 50); // recover animation from saved vars after a pause (0 isn't enough #1973)\n    }\n    delete this.dragElementOriginStyle;\n    return this;\n  }\n\n  /** @internal updates the top/left position to follow the mouse */\n  protected _dragFollow(e: DragEvent): void {\n    let containmentRect = { left: 0, top: 0 };\n    // if (this.helper.style.position === 'absolute') { // we use 'fixed'\n    //   const { left, top } = this.helperContainment.getBoundingClientRect();\n    //   containmentRect = { left, top };\n    // }\n    const style = this.helper.style;\n    const offset = this.dragOffset;\n    style.left = e.clientX + offset.offsetLeft - containmentRect.left + 'px';\n    style.top = e.clientY + offset.offsetTop - containmentRect.top + 'px';\n  }\n\n  /** @internal */\n  protected _setupHelperContainmentStyle(): DDDraggable {\n    this.helperContainment = this.helper.parentElement;\n    if (this.helper.style.position !== 'fixed') {\n      this.parentOriginStylePosition = this.helperContainment.style.position;\n      if (window.getComputedStyle(this.helperContainment).position.match(/static/)) {\n        this.helperContainment.style.position = 'relative';\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _getDragOffset(event: DragEvent, el: HTMLElement, parent: HTMLElement): DragOffset {\n\n    // in case ancestor has transform/perspective css properties that change the viewpoint\n    let xformOffsetX = 0;\n    let xformOffsetY = 0;\n    if (parent) {\n      const testEl = document.createElement('div');\n      Utils.addElStyles(testEl, {\n        opacity: '0',\n        position: 'fixed',\n        top: 0 + 'px',\n        left: 0 + 'px',\n        width: '1px',\n        height: '1px',\n        zIndex: '-999999',\n      });\n      parent.appendChild(testEl);\n      const testElPosition = testEl.getBoundingClientRect();\n      parent.removeChild(testEl);\n      xformOffsetX = testElPosition.left;\n      xformOffsetY = testElPosition.top;\n      // TODO: scale ?\n    }\n\n    const targetOffset = el.getBoundingClientRect();\n    return {\n      left: targetOffset.left,\n      top: targetOffset.top,\n      offsetLeft: - event.clientX + targetOffset.left - xformOffsetX,\n      offsetTop: - event.clientY + targetOffset.top - xformOffsetY,\n      width: targetOffset.width,\n      height: targetOffset.height\n    };\n  }\n\n  /** @internal TODO: set to public as called by DDDroppable! */\n  public ui(): DDUIData {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const offset = this.helper.getBoundingClientRect();\n    return {\n      position: { //Current CSS position of the helper as { top, left } object\n        top: offset.top - containmentRect.top,\n        left: offset.left - containmentRect.left\n      }\n      /* not used by GridStack for now...\n      helper: [this.helper], //The object arr representing the helper that's being dragged.\n      offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\n      */\n    };\n  }\n}\n","/**\n * dd-droppable.ts 8.4.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, pointerenter, pointerleave } from './dd-touch';\nimport { DDUIData } from './types';\n\nexport interface DDDroppableOpt {\n  accept?: string | ((el: HTMLElement) => boolean);\n  drop?: (event: DragEvent, ui: DDUIData) => void;\n  over?: (event: DragEvent, ui: DDUIData) => void;\n  out?: (event: DragEvent, ui: DDUIData) => void;\n}\n\n// let count = 0; // TEST\n\nexport class DDDroppable extends DDBaseImplement implements HTMLElementExtendOpt<DDDroppableOpt> {\n\n  public accept: (el: HTMLElement) => boolean;\n  public el: HTMLElement;\n  public option: DDDroppableOpt;\n\n  constructor(el: HTMLElement, opts: DDDroppableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseEnter = this._mouseEnter.bind(this);\n    this._mouseLeave = this._mouseLeave.bind(this);\n    this.enable();\n    this._setupAccept();\n  }\n\n  public on(event: 'drop' | 'dropover' | 'dropout', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drop' | 'dropover' | 'dropout'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.el.classList.add('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    this.el.addEventListener('mouseenter', this._mouseEnter);\n    this.el.addEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.addEventListener('pointerenter', pointerenter);\n      this.el.addEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.el.classList.remove('ui-droppable');\n    if (!forDestroy) this.el.classList.add('ui-droppable-disabled');\n    this.el.removeEventListener('mouseenter', this._mouseEnter);\n    this.el.removeEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.removeEventListener('pointerenter', pointerenter);\n      this.el.removeEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public destroy(): void {\n    this.disable(true);\n    this.el.classList.remove('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDroppableOpt): DDDroppable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    this._setupAccept();\n    return this;\n  }\n\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n  protected _mouseEnter(e: MouseEvent): void {\n    // console.log(`${count++} Enter ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement) return;\n    if (!this._canDrop(DDManager.dragElement.el)) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // make sure when we enter this, that the last one gets a leave FIRST to correctly cleanup as we don't always do\n    if (DDManager.dropElement && DDManager.dropElement !== this) {\n      DDManager.dropElement._mouseLeave(e as DragEvent);\n    }\n    DDManager.dropElement = this;\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropover' });\n    if (this.option.over) {\n      this.option.over(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropover', ev);\n    this.el.classList.add('ui-droppable-over');\n    // console.log('tracking'); // TEST\n  }\n\n  /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n  protected _mouseLeave(e: MouseEvent): void {\n    // console.log(`${count++} Leave ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement || DDManager.dropElement !== this) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropout' });\n    if (this.option.out) {\n      this.option.out(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropout', ev);\n\n    if (DDManager.dropElement === this) {\n      delete DDManager.dropElement;\n      // console.log('not tracking'); // TEST\n\n      // if we're still over a parent droppable, send it an enter as we don't get one from leaving nested children\n      let parentDrop: DDDroppable;\n      let parent: DDElementHost = this.el.parentElement;\n      while (!parentDrop && parent) {\n        parentDrop = parent.ddElement?.ddDroppable;\n        parent = parent.parentElement;\n      }\n      if (parentDrop) {\n        parentDrop._mouseEnter(e);\n      }\n    }\n  }\n\n  /** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */\n  public drop(e: MouseEvent): void {\n    e.preventDefault();\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drop' });\n    if (this.option.drop) {\n      this.option.drop(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('drop', ev);\n  }\n\n  /** @internal true if element matches the string/method accept option */\n  protected _canDrop(el: HTMLElement): boolean {\n    return el && (!this.accept || this.accept(el));\n  }\n\n  /** @internal */\n  protected _setupAccept(): DDDroppable {\n    if (!this.option.accept) return this;\n    if (typeof this.option.accept === 'string') {\n      this.accept = (el: HTMLElement) => el.classList.contains(this.option.accept as string) || el.matches(this.option.accept as string);\n    } else {\n      this.accept = this.option.accept;\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _ui(drag: DDDraggable): DDUIData {\n    return {\n      draggable: drag.el,\n      ...drag.ui()\n    };\n  }\n}\n\n","/**\n * dd-elements.ts 8.4.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizable, DDResizableOpt } from './dd-resizable';\nimport { GridItemHTMLElement } from './types';\nimport { DDDraggable, DDDraggableOpt } from './dd-draggable';\nimport { DDDroppable, DDDroppableOpt } from './dd-droppable';\n\nexport interface DDElementHost extends GridItemHTMLElement {\n  ddElement?: DDElement;\n}\n\nexport class DDElement {\n\n  static init(el: DDElementHost): DDElement {\n    if (!el.ddElement) { el.ddElement = new DDElement(el); }\n    return el.ddElement;\n  }\n\n  public el: DDElementHost;\n  public ddDraggable?: DDDraggable;\n  public ddDroppable?: DDDroppable;\n  public ddResizable?: DDResizable;\n\n  constructor(el: DDElementHost) {\n    this.el = el;\n  }\n\n  public on(eventName: string, callback: (event: MouseEvent) => void): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.on(eventName as 'drag' | 'dragstart' | 'dragstop', callback);\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.on(eventName as 'drop' | 'dropover' | 'dropout', callback);\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.on(eventName as 'resizestart' | 'resize' | 'resizestop', callback);\n    }\n    return this;\n  }\n\n  public off(eventName: string): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.off(eventName as 'drag' | 'dragstart' | 'dragstop');\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.off(eventName as 'drop' | 'dropover' | 'dropout');\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.off(eventName as 'resizestart' | 'resize' | 'resizestop');\n    }\n    return this;\n  }\n\n  public setupDraggable(opts: DDDraggableOpt): DDElement {\n    if (!this.ddDraggable) {\n      this.ddDraggable = new DDDraggable(this.el, opts);\n    } else {\n      this.ddDraggable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDraggable(): DDElement {\n    if (this.ddDraggable) {\n      this.ddDraggable.destroy();\n      delete this.ddDraggable;\n    }\n    return this;\n  }\n\n  public setupResizable(opts: DDResizableOpt): DDElement {\n    if (!this.ddResizable) {\n      this.ddResizable = new DDResizable(this.el, opts);\n    } else {\n      this.ddResizable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanResizable(): DDElement {\n    if (this.ddResizable) {\n      this.ddResizable.destroy();\n      delete this.ddResizable;\n    }\n    return this;\n  }\n\n  public setupDroppable(opts: DDDroppableOpt): DDElement {\n    if (!this.ddDroppable) {\n      this.ddDroppable = new DDDroppable(this.el, opts);\n    } else {\n      this.ddDroppable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDroppable(): DDElement {\n    if (this.ddDroppable) {\n      this.ddDroppable.destroy();\n      delete this.ddDroppable;\n    }\n    return this;\n  }\n}\n","/*!\r\n * GridStack 8.4.0\r\n * https://gridstackjs.com/\r\n *\r\n * Copyright (c) 2021-2022 Alain Dumesny\r\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\r\n */\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { Utils, HeightData, obsolete } from './utils';\r\nimport { gridDefaults, ColumnOptions, GridItemHTMLElement, GridStackElement, GridStackEventHandlerCallback,\r\n  GridStackNode, GridStackWidget, numberOrString, DDUIData, DDDragInOpt, GridStackPosition, GridStackOptions,\r\n  dragInDefaultOptions, GridStackEventHandler, GridStackNodesHandler, AddRemoveFcn, SaveFcn, CompactOptions } from './types';\r\n\r\n/*\r\n * and include D&D by default\r\n * TODO: while we could generate a gridstack-static.js at smaller size - saves about 31k (41k -> 72k)\r\n * I don't know how to generate the DD only code at the remaining 31k to delay load as code depends on Gridstack.ts\r\n * also it caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\r\n */\r\nimport { DDGridStack } from './dd-gridstack';\r\nimport { isTouch } from './dd-touch';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElementHost } from './dd-element';\r\n/** global instance */\r\nconst dd = new DDGridStack;\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './dd-gridstack';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\n/** list of possible events, or space separated list of them */\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'drag' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resize' | 'resizestart' | 'resizestop' | string;\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _max?: number; // internal tracker of the max # of rows we created\r\n}\r\n\r\n// extend with internal fields we need - TODO: move other items in here\r\ninterface InternalGridStackOptions extends GridStackOptions {\r\n  _alwaysShowResizeHandle?: true | false | 'mobile'; // so we can restore for save\r\n}\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n      '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) return null;\r\n\r\n    let el = parent as GridHTMLElement;\r\n    if (el.gridstack) {\r\n      // already a grid - set option and load data\r\n      const grid = el.gridstack;\r\n      if (opt) grid.opts = {...grid.opts, ...opt};\r\n      if (opt.children !== undefined) grid.load(opt.children);\r\n      return grid;\r\n    }\r\n\r\n    // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\r\n    const parentIsGrid = parent.classList.contains('grid-stack');\r\n    if (!parentIsGrid || GridStack.addRemoveCB) {\r\n      if (GridStack.addRemoveCB) {\r\n        el = GridStack.addRemoveCB(parent, opt, true, true);\r\n      } else {\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n        el = doc.body.children[0] as HTMLElement;\r\n        parent.appendChild(el);\r\n      }\r\n    }\r\n\r\n    // create grid class and load any children\r\n    let grid = GridStack.init(opt, el);\r\n    return grid;\r\n  }\r\n\r\n  /** call this method to register your engine instead of the default one.\r\n   * See instead `GridStackOptions.engineClass` if you only need to\r\n   * replace just one instance.\r\n   */\r\n  static registerEngine(engineClass: typeof GridStackEngine): void {\r\n    GridStack.engineClass = engineClass;\r\n  }\r\n\r\n  /**\r\n   * callback method use when new items|grids needs to be created or deleted, instead of the default\r\n   * item: <div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">w.content</div></div>\r\n   * grid: <div class=\"grid-stack\">grid content...</div>\r\n   * add = true: the returned DOM element will then be converted to a GridItemHTMLElement using makeWidget()|GridStack:init().\r\n   * add = false: the item will be removed from DOM (if not already done)\r\n   * grid = true|false for grid vs grid-items\r\n   */\r\n  public static addRemoveCB?: AddRemoveFcn;\r\n\r\n  /**\r\n   * callback during saving to application can inject extra data for each widget, on top of the grid layout properties\r\n   */\r\n  public static saveCB?: SaveFcn;\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridStackOptions;\r\n\r\n  /** point to a parent grid item if we're nested (inside a grid-item in between 2 Grids) */\r\n  public parentGridItem?: GridStackNode;\r\n\r\n  protected static engineClass: typeof GridStackEngine;\r\n\r\n  /** @internal unique class name for our generated CSS style sheet */\r\n  protected _styleSheetClass?: string;\r\n  /** @internal true if we got created by drag over gesture, so we can removed on drag out (temporary) */\r\n  public _isTemp?: boolean;\r\n\r\n  /** @internal create placeholder DIV as needed */\r\n  public get placeholder(): HTMLElement {\r\n    if (!this._placeholder) {\r\n      let placeholderChild = document.createElement('div'); // child so padding match item-content\r\n      placeholderChild.className = 'placeholder-content';\r\n      if (this.opts.placeholderText) {\r\n        placeholderChild.innerHTML = this.opts.placeholderText;\r\n      }\r\n      this._placeholder = document.createElement('div');\r\n      this._placeholder.classList.add(this.opts.placeholderClass, gridDefaults.itemClass, this.opts.itemClass);\r\n      this.placeholder.appendChild(placeholderChild);\r\n    }\r\n    return this._placeholder;\r\n  }\r\n  /** @internal */\r\n  protected _placeholder: HTMLElement;\r\n  /** @internal */\r\n  protected _prevColumn: number;\r\n  /** @internal prevent cached layouts from being updated when loading into small column layouts */\r\n  protected _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  protected _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  protected _isAutoCellHeight: boolean;\r\n  /** @internal track event binding to window resize so we can remove */\r\n  protected _windowResizeBind: () => void;\r\n  /** @internal limit auto cell resizing method */\r\n  protected _cellHeightThrottle: () => void;\r\n  /** @internal true when loading items to insert first rather than append */\r\n  protected _insertNotAppend: boolean;\r\n  /** @internal extra row added when dragging at the bottom of the grid */\r\n  protected _extraDragRow = 0;\r\n  /** @internal true if nested grid should get column count from our width */\r\n  protected _autoColumn?: boolean;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridStackOptions = {}) {\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    if (!el.classList.contains('grid-stack')) {\r\n      this.el.classList.add('grid-stack');\r\n    }\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // flag only valid in sub-grids (handled by parent, not here)\r\n    if (opts.column === 'auto') {\r\n      delete opts.column;\r\n    }\r\n    // save original setting so we can restore on save\r\n    if (opts.alwaysShowResizeHandle !== undefined) {\r\n      (opts as InternalGridStackOptions)._alwaysShowResizeHandle = opts.alwaysShowResizeHandle;\r\n    }\r\n\r\n    // elements DOM attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridStackOptions = {...Utils.cloneDeep(gridDefaults),\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || gridDefaults.column,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || gridDefaults.minRow,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || gridDefaults.maxRow,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || gridDefaults.staticGrid,\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || gridDefaults.draggable.handle,\r\n      },\r\n      removableOptions: {\r\n        accept: opts.itemClass || gridDefaults.removableOptions.accept,\r\n        decline: gridDefaults.removableOptions.decline\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    opts = null; // make sure we use this.opts instead\r\n    this._initMargin(); // part of settings defaults...\r\n\r\n    // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n    if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.oneColumnSize) {\r\n      this._prevColumn = this.getColumn();\r\n      this.opts.column = 1;\r\n    }\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = (el.style.direction === 'rtl');\r\n    }\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    let parentGridItem = (Utils.closestUpByClass(this.el, gridDefaults.itemClass) as GridItemHTMLElement)?.gridstackNode;\r\n    if (parentGridItem) {\r\n      parentGridItem.subGrid = this;\r\n      this.parentGridItem = parentGridItem;\r\n      this.el.classList.add('grid-stack-nested');\r\n      parentGridItem.el.classList.add('grid-stack-sub-grid');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\r\n      // make the cell content square initially (will use resize/column event to keep it square)\r\n      this.cellHeight(undefined, false);\r\n    } else {\r\n      // append unit if any are set\r\n      if (typeof this.opts.cellHeight == 'number' && this.opts.cellHeightUnit && this.opts.cellHeightUnit !== gridDefaults.cellHeightUnit) {\r\n        this.opts.cellHeight = this.opts.cellHeight + this.opts.cellHeightUnit;\r\n        delete this.opts.cellHeightUnit;\r\n      }\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    // see if we need to adjust auto-hide\r\n    if (this.opts.alwaysShowResizeHandle === 'mobile') {\r\n      this.opts.alwaysShowResizeHandle = isTouch;\r\n    }\r\n\r\n    this._styleSheetClass = 'gs-id-' + GridStackEngine._idSeq++;\r\n    this.el.classList.add(this._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n\r\n    let engineClass = this.opts.engineClass || GridStack.engineClass || GridStackEngine;\r\n    this.engine = new engineClass({\r\n      column: this.getColumn(),\r\n      float: this.opts.float,\r\n      maxRow: this.opts.maxRow,\r\n      onChange: (cbNodes) => {\r\n        let maxH = 0;\r\n        this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n        cbNodes.forEach(n => {\r\n          let el = n.el;\r\n          if (!el) return;\r\n          if (n._removeDOM) {\r\n            if (el) el.remove();\r\n            delete n._removeDOM;\r\n          } else {\r\n            this._writePosAttr(el, n);\r\n          }\r\n        });\r\n        this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n      }\r\n    });\r\n\r\n    if (this.opts.auto) {\r\n      this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n      this.getGridItems().forEach(el => this._prepareElement(el));\r\n      this.batchUpdate(false);\r\n    }\r\n\r\n    // load any passed in children as well, which overrides any DOM layout done above\r\n    if (this.opts.children) {\r\n      let children = this.opts.children;\r\n      delete this.opts.children;\r\n      if (children.length) this.load(children); // don't load empty\r\n    }\r\n\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    this._updateStyles();\r\n    this.el.classList.add('gs-' + this.opts.column);\r\n\r\n    // dynamic grids require pausing during drag to detect over to nest vs push\r\n    if (this.opts.subGridDynamic && !DDManager.pauseDrag) DDManager.pauseDrag = true;\r\n    if (this.opts.draggable?.pause !== undefined) DDManager.pauseDrag = this.opts.draggable.pause;\r\n\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateWindowResizeEvent();\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use `willItFit()` before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n   *\r\n   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(els?: GridStackWidget | GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n    function isGridStackWidget(w: GridStackNode): w is GridStackNode { // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n      return w.el !== undefined || w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n    }\r\n\r\n    let el: GridItemHTMLElement;\r\n    let node: GridStackNode;\r\n    if (typeof els === 'string') {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = els;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n      node = options = els;\r\n      if (node?.el) {\r\n        el = node.el; // re-use element stored in the node\r\n      } else if (GridStack.addRemoveCB) {\r\n        el = GridStack.addRemoveCB(this.el, options, true, false);\r\n      } else {\r\n        let content = options?.content || '';\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n        el = doc.body.children[0] as HTMLElement;\r\n      }\r\n    } else {\r\n      el = els as HTMLElement;\r\n    }\r\n\r\n    if (!el) return;\r\n\r\n    // if the caller ended up initializing the widget in addRemoveCB, or we stared with one already, skip the rest\r\n    node = el.gridstackNode;\r\n    if (node && el.parentElement === this.el && this.engine.nodes.find(n => n._id === node._id)) return el;\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz') before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    let domAttr = this._readAttr(el);\r\n    options = Utils.cloneDeep(options) || {};  // make a copy before we modify in case caller re-uses it\r\n    Utils.defaults(options, domAttr);\r\n    node = this.engine.prepareNode(options);\r\n    this._writeAttr(el, options);\r\n\r\n    if (this._insertNotAppend) {\r\n      this.el.prepend(el);\r\n    } else {\r\n      this.el.appendChild(el);\r\n    }\r\n\r\n    this.makeWidget(el, options);\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Convert an existing gridItem element into a sub-grid with the given (optional) options, else inherit them\r\n   * from the parent's subGrid options.\r\n   * @param el gridItem element to convert\r\n   * @param ops (optional) sub-grid options, else default to node, then parent settings, else defaults\r\n   * @param nodeToAdd (optional) node to add to the newly created sub grid (used when dragging over existing regular item)\r\n   * @returns newly created grid\r\n   */\r\n  public makeSubGrid(el: GridItemHTMLElement, ops?: GridStackOptions, nodeToAdd?: GridStackNode, saveContent = true): GridStack {\r\n    let node = el.gridstackNode;\r\n    if (!node) {\r\n      node = this.makeWidget(el).gridstackNode;\r\n    }\r\n    if (node.subGrid?.el) return node.subGrid; // already done\r\n\r\n    // find the template subGrid stored on a parent as fallback...\r\n    let subGridTemplate: GridStackOptions; // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    let grid: GridStack = this;\r\n    while (grid && !subGridTemplate) {\r\n      subGridTemplate = grid.opts?.subGridOpts;\r\n      grid = grid.parentGridItem?.grid;\r\n    }\r\n    //... and set the create options\r\n    ops = Utils.cloneDeep({...(subGridTemplate || {}), children: undefined, ...(ops || node.subGridOpts)});\r\n    node.subGridOpts = ops;\r\n\r\n    // if column special case it set, remember that flag and set default\r\n    let autoColumn: boolean;\r\n    if (ops.column === 'auto') {\r\n      autoColumn = true;\r\n      ops.column = Math.max(node.w || 1, nodeToAdd?.w || 1);\r\n      ops.disableOneColumnMode = true; // driven by parent\r\n    }\r\n\r\n    // if we're converting an existing full item, move over the content to be the first sub item in the new grid\r\n    let content = node.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n    let newItem: HTMLElement;\r\n    let newItemOpt: GridStackNode;\r\n    if (saveContent) {\r\n      this._removeDD(node.el); // remove D&D since it's set on content div\r\n      newItemOpt = {...node, x:0, y:0};\r\n      Utils.removeInternalForSave(newItemOpt);\r\n      delete newItemOpt.subGridOpts;\r\n      if (node.content) {\r\n        newItemOpt.content = node.content;\r\n        delete node.content;\r\n      }\r\n      if (GridStack.addRemoveCB) {\r\n        newItem = GridStack.addRemoveCB(this.el, newItemOpt, true, false);\r\n      } else {\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item\"></div>`;\r\n        newItem = doc.body.children[0] as HTMLElement;\r\n        newItem.appendChild(content);\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item-content\"></div>`;\r\n        content = doc.body.children[0] as HTMLElement;\r\n        node.el.appendChild(content);\r\n      }\r\n      this._prepareDragDropByNode(node); // ... and restore original D&D\r\n    }\r\n\r\n    // if we're adding an additional item, make the container large enough to have them both\r\n    if (nodeToAdd) {\r\n      let w = autoColumn ? ops.column : node.w;\r\n      let h = node.h + nodeToAdd.h;\r\n      let style = node.el.style;\r\n      style.transition = 'none'; // show up instantly so we don't see scrollbar with nodeToAdd\r\n      this.update(node.el, {w, h});\r\n      setTimeout(() =>  style.transition = null); // recover animation\r\n    }\r\n\r\n    let subGrid = node.subGrid = GridStack.addGrid(content, ops);\r\n    if (nodeToAdd?._moving) subGrid._isTemp = true; // prevent re-nesting as we add over\r\n    if (autoColumn) subGrid._autoColumn = true;\r\n\r\n    // add the original content back as a child of hte newly created grid\r\n    if (saveContent) {\r\n      subGrid.addWidget(newItem, newItemOpt);\r\n    }\r\n\r\n    // now add any additional node\r\n    if (nodeToAdd) {\r\n      if (nodeToAdd._moving) {\r\n        // create an artificial event even for the just created grid to receive this item\r\n        window.setTimeout(() => Utils.simulateMouseEvent(nodeToAdd._event, 'mouseenter', subGrid.el), 0);\r\n      } else {\r\n        subGrid.addWidget(node.el, node);\r\n      }\r\n    }\r\n    return subGrid;\r\n  }\r\n\r\n  /**\r\n   * called when an item was converted into a nested grid to accommodate a dragged over item, but then item leaves - return back\r\n   * to the original grid-item. Also called to remove empty sub-grids when last item is dragged out (since re-creating is simple)\r\n   */\r\n  public removeAsSubGrid(nodeThatRemoved?: GridStackNode): void {\r\n    let pGrid = this.parentGridItem?.grid;\r\n    if (!pGrid) return;\r\n\r\n    pGrid.batchUpdate();\r\n    pGrid.removeWidget(this.parentGridItem.el, true, true);\r\n    this.engine.nodes.forEach(n => {\r\n      // migrate any children over and offsetting by our location\r\n      n.x += this.parentGridItem.x;\r\n      n.y += this.parentGridItem.y;\r\n      pGrid.addWidget(n.el, n);\r\n    });\r\n    pGrid.batchUpdate(false);\r\n    if (this.parentGridItem) delete this.parentGridItem.subGrid;\r\n    delete this.parentGridItem;\r\n\r\n    // create an artificial event for the original grid now that this one is gone (got a leave, but won't get enter)\r\n    if (nodeThatRemoved) {\r\n      window.setTimeout(() => Utils.simulateMouseEvent(nodeThatRemoved._event, 'mouseenter', pGrid.el), 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization which might include any nested grids.\r\n   * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\r\n   * be removed.\r\n   * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\r\n   * @param saveCB callback for each node -> widget, so application can insert additional data to be saved into the widget data structure.\r\n   * @returns list of widgets or full grid option, including .children list of widgets\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false, saveCB = GridStack.saveCB): GridStackWidget[] | GridStackOptions {\r\n    // return copied GridStackWidget (with optionally .el) we can modify at will...\r\n    let list = this.engine.save(saveContent, saveCB);\r\n\r\n    // check for HTML content and nested grids\r\n    list.forEach(n => {\r\n      if (saveContent && n.el && !n.subGrid && !saveCB) { // sub-grid are saved differently, not plain content\r\n        let sub = n.el.querySelector('.grid-stack-item-content');\r\n        n.content = sub ? sub.innerHTML : undefined;\r\n        if (!n.content) delete n.content;\r\n      } else {\r\n        if (!saveContent && !saveCB) { delete n.content; }\r\n        // check for nested grid\r\n        if (n.subGrid?.el) {\r\n          const listOrOpt = n.subGrid.save(saveContent, saveGridOpt, saveCB);\r\n          n.subGridOpts = (saveGridOpt ? listOrOpt : {children: listOrOpt}) as GridStackOptions;\r\n          delete n.subGrid;\r\n        }\r\n      }\r\n      delete n.el;\r\n    });\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n      let o: InternalGridStackOptions = Utils.cloneDeep(this.opts);\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) {\r\n        o.cellHeight = 'auto'\r\n      }\r\n      if (this._autoColumn) {\r\n        o.column = 'auto';\r\n        delete o.disableOneColumnMode;\r\n      }\r\n      const origShow = o._alwaysShowResizeHandle;\r\n      delete o._alwaysShowResizeHandle;\r\n      if (origShow !== undefined) {\r\n        o.alwaysShowResizeHandle = origShow;\r\n      } else {\r\n        delete o.alwaysShowResizeHandle;\r\n      }\r\n      Utils.removeInternalAndSame(o, gridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   **/\r\n  public load(layout: GridStackWidget[], addRemove: boolean | AddRemoveFcn = GridStack.addRemoveCB || true): GridStack {\r\n    // if passed list has coordinates, use them (insert from end to beginning for conflict resolution) else force widget same order\r\n    const haveCoord = layout.some(w => w.x !== undefined || w.y !== undefined);\r\n    let items = haveCoord ? Utils.sort(layout, -1, this._prevColumn || this.getColumn()) : layout;\r\n    this._insertNotAppend = haveCoord; // if we create in reverse order...\r\n\r\n    // if we're loading a layout into for example 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => ((n.x || 0) + n.w) > (this.opts.column as number))) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, this._prevColumn, true);\r\n    }\r\n\r\n    // if given a different callback, temporally set it as global option so creating will use it\r\n    const prevCB = GridStack.addRemoveCB;\r\n    if (typeof(addRemove) === 'function') GridStack.addRemoveCB = addRemove as AddRemoveFcn;\r\n\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        let item = items.find(w => n.id === w.id);\r\n        if (!item) {\r\n          if (GridStack.addRemoveCB)\r\n            GridStack.addRemoveCB(this.el, n, false, false);\r\n          removed.push(n); // batch keep track\r\n          this.removeWidget(n.el, true, false);\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets - starting with an empty list to reduce collision and add no-coord ones at next available spot\r\n    let copyNodes = this.engine.nodes;\r\n    this.engine.nodes = [];\r\n    items.forEach(w => {\r\n      let item = (w.id !== undefined) ? copyNodes.find(n => n.id === w.id) : undefined;\r\n      if (item) {\r\n        // check if missing coord, in which case find next empty slot with new (or old if missing) sizes\r\n        if (w.autoPosition || w.x === undefined || w.y === undefined) {\r\n          w.w = w.w || item.w;\r\n          w.h = w.h || item.h;\r\n          this.engine.findEmptyPosition(w);\r\n        }\r\n        this.engine.nodes.push(item); // now back to current list...\r\n        this.update(item.el, w);\r\n        if (w.subGridOpts?.children) { // update any sub grid as well\r\n          let sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load(w.subGridOpts.children); // TODO: support updating grid options ?\r\n            this._insertNotAppend = true; // got reset by above call\r\n          }\r\n        }\r\n      } else if (addRemove) {\r\n        this.addWidget(w);\r\n      }\r\n    });\r\n\r\n    this.engine.removedNodes = removed;\r\n    this.batchUpdate(false);\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n    delete this._insertNotAppend;\r\n    prevCB ? GridStack.addRemoveCB = prevCB : delete GridStack.addRemoveCB;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * use before calling a bunch of `addWidget()` to prevent un-necessary relayouts in between (more efficient)\r\n   * and get a single event callback. You will see no changes until `batchUpdate(false)` is called.\r\n   */\r\n  public batchUpdate(flag = true): GridStack {\r\n    this.engine.batchUpdate(flag);\r\n    if (!flag) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerAddEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n       (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // else get first cell height\r\n    let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    if (el) {\r\n      let height = Utils.toNumber(el.getAttribute('gs-h')) || 1; // since we don't write 1 anymore\r\n      return Math.round(el.offsetHeight / height);\r\n    }\r\n    // else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)\r\n    let rows = parseInt(this.el.getAttribute('gs-current-row'));\r\n    return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight as number;\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n   * if pass 0 the CSS will be generated by the application instead.\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(100); // same as 100px\r\n   * grid.cellHeight('70px');\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val?: numberOrString, update = true): GridStack {\r\n\r\n    // if not called internally, check if we're changing mode\r\n    if (update && val !== undefined) {\r\n      if (this._isAutoCellHeight !== (val === 'auto')) {\r\n        this._isAutoCellHeight = (val === 'auto');\r\n        this._updateWindowResizeEvent();\r\n      }\r\n    }\r\n    if (val === 'initial' || val === 'auto') { val = undefined; }\r\n\r\n    // make item content be square\r\n    if (val === undefined) {\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      val = this.cellWidth() + marginDiff;\r\n    }\r\n\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    if (update) {\r\n      this._updateStyles(true); // true = force re-create for current # of rows\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** Gets current cell width. */\r\n  public cellWidth(): number {\r\n    return this._widthOrContainer() / this.getColumn();\r\n  }\r\n  /** return our expected width (or parent) for 1 column check */\r\n  protected _widthOrContainer(): number {\r\n    // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n    // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n    return (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n  }\r\n\r\n  /**\r\n   * re-layout grid items to reclaim any empty space. Options are:\r\n   * 'list' keep the widget left->right order the same, even if that means leaving an empty slot if things don't fit\r\n   * 'compact' might re-order items to fill any empty space\r\n   * \r\n   * doSort - 'false' to let you do your own sorting ahead in case you need to control a different order. (default to sort)\r\n   **/\r\n  public compact(layout: CompactOptions = 'compact', doSort = true): GridStack {\r\n    this.engine.compact(layout, doSort);\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default ('moveScale'). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (column < 1 || this.opts.column === column) return this;\r\n    let oldColumn = this.getColumn();\r\n\r\n    // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n    // then remember the original columns so we can restore.\r\n    if (column === 1) {\r\n      this._prevColumn = oldColumn;\r\n    } else {\r\n      delete this._prevColumn;\r\n    }\r\n\r\n    this.el.classList.remove('gs-' + oldColumn);\r\n    this.el.classList.add('gs-' + column);\r\n    this.opts.column = this.engine.column = column;\r\n\r\n    // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n    let domNodes: GridStackNode[];\r\n    if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n      domNodes = [];\r\n      this.getGridItems().forEach(el => { // get dom elements in order\r\n        if (el.gridstackNode) { domNodes.push(el.gridstackNode); }\r\n      });\r\n      if (!domNodes.length) { domNodes = undefined; }\r\n    }\r\n    this.engine.columnChanged(oldColumn, column, domNodes, layout);\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number {\r\n    return this.opts.column as number;\r\n  }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) return; // prevent multiple calls\r\n    this.offAll();\r\n    this._updateWindowResizeEvent(true);\r\n    this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\r\n    this.setAnimation(false);\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this._styleSheetClass);\r\n      this.el.removeAttribute('gs-current-row');\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    if (this.parentGridItem) delete this.parentGridItem.subGrid;\r\n    delete this.parentGridItem;\r\n    delete this.opts;\r\n    delete this._placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    if (this.opts.float !== val) {\r\n      this.opts.float = this.engine.float = val;\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos: {top: number, left: number};\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.getColumn());\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand (or have some framework creating DOM), you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   * @param options widget definition to use instead of reading attributes or using default sizing values\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"1\" gs-w=\"3\"></div>');\r\n   * grid.el.appendChild('<div id=\"2\"></div>');\r\n   * grid.makeWidget('1');\r\n   * grid.makeWidget('2', {w:2, content: 'hello'});\r\n   */\r\n  public makeWidget(els: GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n    let el = GridStack.getElement(els);\r\n    this._prepareElement(el, true, options);\r\n    this._updateContainerHeight();\r\n\r\n    // see if there is a sub-grid to create\r\n    const node = el.gridstackNode;\r\n    if (node.subGridOpts) {\r\n      this.makeSubGrid(el, node.subGridOpts, undefined, false); // node.subGrid will be used as option in method, no need to pass\r\n    }\r\n\r\n    // if we're adding an item into 1 column (_prevColumn is set only when going to 1) make sure\r\n    // we don't override the larger 12 column layout that was already saved. #1985\r\n    if (this._prevColumn && this.opts.column === 1) {\r\n      this._ignoreLayoutsNodeChange = true;\r\n    }\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  public on(name: GridStackEvent, callback: GridStackEventHandlerCallback): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => (callback as GridStackEventHandler)(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => (callback as GridStackNodesHandler)(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize' || name === 'resizestop' || name === 'dropped') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /** remove all event handlers */\r\n  public offAll(): GridStack {\r\n    Object.keys(this._gsEventHandler).forEach(key => this.off(key));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement && el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      if (GridStack.addRemoveCB) {\r\n        GridStack.addRemoveCB(this.el, node, false, false);\r\n      }\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      this._removeDD(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      this._removeDD(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   * @param updateClass true (default) if css class gets updated\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public setStatic(val: boolean, updateClass = true, recurse = true): GridStack {\r\n    if (!!this.opts.staticGrid === val) return this;\r\n    val ? this.opts.staticGrid = true : delete this.opts.staticGrid;\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this.engine.nodes.forEach(n => {\r\n      this._prepareDragDropByNode(n); // either delete or init Drag&drop\r\n      if (n.subGrid && recurse) n.subGrid.setStatic(val, updateClass, recurse);\r\n    });\r\n    if (updateClass) { this._setStaticClass(); }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1;\r\n      opt = { x:a[i++], y:a[i++], w:a[i++], h:a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      let n = el?.gridstackNode;\r\n      if (!n) return;\r\n      let w = Utils.cloneDeep(opt); // make a copy we can modify in case they re-use it or multiple items\r\n      delete w.autoPosition;\r\n\r\n      // move/resize widget if anything changed\r\n      let keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content !== undefined) {\r\n        const itemContent = el.querySelector('.grid-stack-item-content');\r\n        if (!itemContent || itemContent.innerHTML === w.content) return;\r\n        itemContent.innerHTML = w.content;\r\n        // restore any sub-grid back\r\n        if (n.subGrid?.el) {\r\n          itemContent.appendChild(n.subGrid.el);\r\n          if (!n.subGrid.opts.styleInHead) n.subGrid._updateStyles(true); // force create\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n      Utils.sanitizeMinMax(n);\r\n\r\n      // finally move the widget\r\n      if (m) {\r\n        this.engine.cleanNodes()\r\n          .beginUpdate(n)\r\n          .moveNode(n, m);\r\n        this._updateContainerHeight();\r\n        this._triggerChangeEvent();\r\n        this.engine.endUpdate();\r\n      }\r\n      if (changed) { // move will only update x,y,w,h so update the rest too\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      let data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this._initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less than the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param node contains x,y,w,h,auto-position options\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newWidget)) {\r\n   *   grid.addWidget(newWidget);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(node: GridStackWidget): boolean {\r\n    // support legacy call for now\r\n    if (arguments.length > 1) {\r\n      console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 0,\r\n        w: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++] };\r\n      return this.willItFit(w);\r\n    }\r\n    return this.engine.willItFit(node);\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.addedNodes?.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.removedNodes?.length) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerEvent(type: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(type, {bubbles: false, detail: data}) : new Event(type);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  protected _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      Utils.removeStylesheet(this._styleSheetClass);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  protected _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    if (!maxH) maxH = this.getRow();\r\n    this._updateContainerHeight();\r\n\r\n    // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n    if (this.opts.cellHeight === 0) {\r\n      return this;\r\n    }\r\n\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(this._styleSheetClass, styleLocation, {\r\n        nonce: this.opts.nonce,\r\n      });\r\n      if (!this._styles) return this;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i}\"]`, `top: ${getHeight(i)}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i+1}\"]`, `height: ${getHeight(i+1)}`); // start at 2\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) return this;\r\n    let row = this.getRow() + this._extraDragRow; // checks for minRow already\r\n    // check for css min height\r\n    // Note: we don't handle %,rem correctly so comment out, beside we don't need need to create un-necessary\r\n    // rows as the CSS will make us bigger than our set height if needed... not sure why we had this.\r\n    // let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);\r\n    // if (cssMinHeight > 0) {\r\n    //   let minRow = Math.round(cssMinHeight / this.getCellHeight(true));\r\n    //   if (row < minRow) {\r\n    //     row = minRow;\r\n    //   }\r\n    // }\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    if (row === 0) {\r\n      this.el.style.removeProperty('min-height');\r\n      return this;\r\n    }\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) return this;\r\n    this.el.style.minHeight = row * cellHeight + unit;\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    el.classList.add(this.opts.itemClass);\r\n    node = node || this._readAttr(el);\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    let copy = {...node};\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n    // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n    if (!Utils.same(node, copy)) {\r\n      this._writeAttr(el, node);\r\n    }\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write position x,y,w,h attributes back to element */\r\n  protected _writePosAttr(el: HTMLElement, n: GridStackPosition): GridStack {\r\n    if (n.x !== undefined && n.x !== null) { el.setAttribute('gs-x', String(n.x)); }\r\n    if (n.y !== undefined && n.y !== null) { el.setAttribute('gs-y', String(n.y)); }\r\n    n.w > 1 ? el.setAttribute('gs-w', String(n.w)) : el.removeAttribute('gs-w');\r\n    n.h > 1 ? el.setAttribute('gs-h', String(n.h)) : el.removeAttribute('gs-h');\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  protected _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writePosAttr(el, node);\r\n\r\n    let attrs /*: GridStackWidget but strings */ = { // remaining attributes\r\n      autoPosition: 'gs-auto-position',\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  protected _readAttr(el: HTMLElement, clearDefaultAttr = true): GridStackWidget {\r\n    let n: GridStackNode = {};\r\n    n.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    n.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    n.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    n.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    n.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    n.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    n.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    n.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    n.id = el.getAttribute('gs-id');\r\n\r\n    // read but never written out\r\n    n.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    n.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    n.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    n.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n\r\n    // v8.x optimization to reduce un-needed attr that don't render or are default CSS\r\n    if (clearDefaultAttr) {\r\n      if (n.w === 1) el.removeAttribute('gs-w');\r\n      if (n.h === 1) el.removeAttribute('gs-h');\r\n      if (n.maxW) el.removeAttribute('gs-max-w');\r\n      if (n.minW) el.removeAttribute('gs-min-w');\r\n      if (n.maxH) el.removeAttribute('gs-max-h');\r\n      if (n.minH) el.removeAttribute('gs-min-h');\r\n    }\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in n) {\r\n      if (!n.hasOwnProperty(key)) return;\r\n      if (!n[key] && n[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete n[key];\r\n      }\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _setStaticClass(): GridStack {\r\n    let classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, or get our count from parent, as well as check for auto cell height (square)\r\n   */\r\n  public onParentResize(): GridStack {\r\n    if (!this.el || !this.el.clientWidth) return; // return if we're gone or no size yet (will get called again)\r\n    let changedColumn = false;\r\n\r\n    // see if we're nested and take our column count from our parent....\r\n    if (this._autoColumn && this.parentGridItem) {\r\n      if (this.opts.column !== this.parentGridItem.w) {\r\n        changedColumn = true;\r\n        this.column(this.parentGridItem.w, 'none');\r\n      }\r\n    } else {\r\n      // else check for 1 column in/out behavior\r\n      let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.oneColumnSize;\r\n      if ((this.opts.column === 1) !== oneColumn) {\r\n        changedColumn = true;\r\n        if (this.opts.animate) { this.setAnimation(false); } // 1 <-> 12 is too radical, turn off animation\r\n        this.column(oneColumn ? 1 : this._prevColumn);\r\n        if (this.opts.animate) { this.setAnimation(true); }\r\n      }\r\n    }\r\n\r\n    // make the cells content square again\r\n    if (this._isAutoCellHeight) {\r\n      if (!changedColumn && this.opts.cellHeightThrottle) {\r\n        if (!this._cellHeightThrottle) {\r\n          this._cellHeightThrottle = Utils.throttle(() => this.cellHeight(), this.opts.cellHeightThrottle);\r\n        }\r\n        this._cellHeightThrottle();\r\n      } else {\r\n        // immediate update if we've changed column count or have no threshold\r\n        this.cellHeight();\r\n      }\r\n    }\r\n\r\n    // finally update any nested grids\r\n    this.engine.nodes.forEach(n => {\r\n      if (n.subGrid) n.subGrid.onParentResize()\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /** add or remove the window size event handler */\r\n  protected _updateWindowResizeEvent(forceRemove = false): GridStack {\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n    const workTodo = (this._isAutoCellHeight || !this.opts.disableOneColumnMode) && !this.parentGridItem;\r\n\r\n    if (!forceRemove && workTodo && !this._windowResizeBind) {\r\n      this._windowResizeBind = this.onParentResize.bind(this); // so we can properly remove later\r\n      window.addEventListener('resize', this._windowResizeBind);\r\n    } else if ((forceRemove || !workTodo) && this._windowResizeBind) {\r\n      window.removeEventListener('resize', this._windowResizeBind);\r\n      delete this._windowResizeBind; // remove link to us so we can free\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  protected _initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  static GDRev = '8.4.0';\r\n\r\n  /* ===========================================================================================\r\n   * drag&drop methods that used to be stubbed out and implemented in dd-gridstack.ts\r\n   * but caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\r\n   * ===========================================================================================\r\n   */\r\n\r\n  /** get the global (but static to this code) DD implementation */\r\n  public static getDD(): DDGridStack {\r\n    return dd;\r\n  }\r\n\r\n  /**\r\n   * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n   * Called during GridStack.init() as options, but can also be called directly (last param are used) in case the toolbar\r\n   * is dynamically create and needs to be set later.\r\n   * @param dragIn string selector (ex: '.sidebar .grid-stack-item') or list of dom elements\r\n   * @param dragInOptions options - see DDDragInOpt. (default: {handle: '.grid-stack-item-content', appendTo: 'body'}\r\n   * @param root optional root which defaults to document (for shadow dom pas the parent HTMLDocument)\r\n   **/\r\n  public static setupDragIn(dragIn?: string | HTMLElement[], dragInOptions?: DDDragInOpt, root: HTMLElement | Document = document): void {\r\n    if (dragInOptions?.pause !== undefined) {\r\n      DDManager.pauseDrag = dragInOptions.pause;\r\n    }\r\n\r\n    dragInOptions = {...dragInDefaultOptions, ...(dragInOptions || {})};\r\n    let els: HTMLElement[] = (typeof dragIn === 'string') ? Utils.getElements(dragIn, root) : dragIn;\r\n    if (els.length) els?.forEach(el => {\r\n      if (!dd.isDraggable(el)) dd.dragIn(el, dragInOptions);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\r\n   * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable, assuming the parent grid isn't noMove or static.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't move a static grid!\r\n    GridStack.getElements(els).forEach(el => {\r\n      let n = el.gridstackNode;\r\n      if (!n) return;\r\n      val ? delete n.noMove : n.noMove = true;\r\n      this._prepareDragDropByNode(n); // init DD if need be, and adjust\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable, assuming the parent grid isn't noResize or static.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't resize a static grid!\r\n    GridStack.getElements(els).forEach(el => {\r\n      let n = el.gridstackNode;\r\n      if (!n) return;\r\n      val ? delete n.noResize : n.noResize = true;\r\n      this._prepareDragDropByNode(n); // init DD if need be, and adjust\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public disable(recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return;\r\n    this.enableMove(false, recurse);\r\n    this.enableResize(false, recurse);\r\n    this._triggerEvent('disable');\r\n    return this;\r\n  }\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enable(recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return;\r\n    this.enableMove(true, recurse);\r\n    this.enableResize(true, recurse);\r\n    this._triggerEvent('enable');\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids, and locally defined items still overrule\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enableMove(doEnable: boolean, recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't move a static grid!\r\n    doEnable ? delete this.opts.disableDrag : this.opts.disableDrag = true; // FIRST before we update children as grid overrides #1658\r\n    this.engine.nodes.forEach(n => {\r\n      this._prepareDragDropByNode(n);\r\n      if (n.subGrid && recurse) n.subGrid.enableMove(doEnable, recurse);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enableResize(doEnable: boolean, recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't size a static grid!\r\n    doEnable ? delete this.opts.disableResize : this.opts.disableResize = true; // FIRST before we update children as grid overrides #1658\r\n    this.engine.nodes.forEach(n => {\r\n      this._prepareDragDropByNode(n);\r\n      if (n.subGrid && recurse) n.subGrid.enableResize(doEnable, recurse);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** @internal removes any drag&drop present (called during destroy) */\r\n  protected _removeDD(el: DDElementHost): GridStack {\r\n    dd.draggable(el, 'destroy').resizable(el, 'destroy');\r\n    if (el.gridstackNode) {\r\n      delete el.gridstackNode._initDD; // reset our DD init flag\r\n    }\r\n    delete el.ddElement;\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to add drag over to support widgets being added externally */\r\n  protected _setupAcceptWidget(): GridStack {\r\n\r\n    // check if we need to disable things\r\n    if (this.opts.staticGrid || (!this.opts.acceptWidgets && !this.opts.removable)) {\r\n      dd.droppable(this.el, 'destroy');\r\n      return this;\r\n    }\r\n\r\n    // vars shared across all methods\r\n    let cellHeight: number, cellWidth: number;\r\n\r\n    let onDrag = (event: DragEvent, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      if (!node) return;\r\n\r\n      helper = helper || el;\r\n      let parent = this.el.getBoundingClientRect();\r\n      let {top, left} = helper.getBoundingClientRect();\r\n      left -= parent.left;\r\n      top -= parent.top;\r\n      let ui: DDUIData = {position: {top, left}};\r\n\r\n      if (node._temporaryRemoved) {\r\n        node.x = Math.max(0, Math.round(left / cellWidth));\r\n        node.y = Math.max(0, Math.round(top / cellHeight));\r\n        delete node.autoPosition;\r\n        this.engine.nodeBoundFix(node);\r\n\r\n        // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n        if (!this.engine.willItFit(node)) {\r\n          node.autoPosition = true; // ignore x,y and try for any slot...\r\n          if (!this.engine.willItFit(node)) {\r\n            dd.off(el, 'drag'); // stop calling us\r\n            return; // full grid or can't grow\r\n          }\r\n          if (node._willFitPos) {\r\n            // use the auto position instead #1687\r\n            Utils.copyPos(node, node._willFitPos);\r\n            delete node._willFitPos;\r\n          }\r\n        }\r\n\r\n        // re-use the existing node dragging method\r\n        this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\r\n      } else {\r\n        // re-use the existing node dragging that does so much of the collision detection\r\n        this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n    }\r\n\r\n    dd.droppable(this.el, {\r\n      accept: (el: GridItemHTMLElement) => {\r\n        let node: GridStackNode = el.gridstackNode;\r\n        // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n        if (node?.grid === this) return true;\r\n        if (!this.opts.acceptWidgets) return false;\r\n        // check for accept method or class matching\r\n        let canAccept = true;\r\n        if (typeof this.opts.acceptWidgets === 'function') {\r\n          canAccept = this.opts.acceptWidgets(el);\r\n        } else {\r\n          let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets as string);\r\n          canAccept = el.matches(selector);\r\n        }\r\n        // finally check to make sure we actually have space left #1571\r\n        if (canAccept && node && this.opts.maxRow) {\r\n          let n = {w: node.w, h: node.h, minW: node.minW, minH: node.minH}; // only width/height matters and autoPosition\r\n          canAccept = this.engine.willItFit(n);\r\n        }\r\n        return canAccept;\r\n      }\r\n    })\r\n    /**\r\n     * entering our grid area\r\n     */\r\n      .on(this.el, 'dropover', (event: Event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      // console.log(`over ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n        let node = el.gridstackNode;\r\n        // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\r\n        if (node?.grid === this && !node._temporaryRemoved) {\r\n        // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n          return false; // prevent parent from receiving msg (which may be a grid as well)\r\n        }\r\n\r\n        // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\r\n        if (node?.grid && node.grid !== this && !node._temporaryRemoved) {\r\n        // console.log('dropover without leave'); // TEST\r\n          let otherGrid = node.grid;\r\n          otherGrid._leave(el, helper);\r\n        }\r\n\r\n        // cache cell dimensions (which don't change), position can animate if we removed an item in otherGrid that affects us...\r\n        cellWidth = this.cellWidth();\r\n        cellHeight = this.getCellHeight(true);\r\n\r\n        // load any element attributes if we don't have a node\r\n        if (!node) {\r\n          node = this._readAttr(el, false); // don't wipe external (e.g. drag toolbar) attr #2354\r\n        }\r\n        if (!node.grid) {\r\n          node._isExternal = true;\r\n          el.gridstackNode = node;\r\n        }\r\n\r\n        // calculate the grid size based on element outer size\r\n        helper = helper || el;\r\n        let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\r\n        let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\r\n\r\n        // if the item came from another grid, make a copy and save the original info in case we go back there\r\n        if (node.grid && node.grid !== this) {\r\n        // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n        // console.log('dropover cloning node'); // TEST\r\n          if (!el._gridstackNodeOrig) el._gridstackNodeOrig = node; // shouldn't have multiple nested!\r\n          el.gridstackNode = node = {...node, w, h, grid: this};\r\n          this.engine.cleanupNode(node)\r\n            .nodeBoundFix(node);\r\n          // restore some internal fields we need after clearing them all\r\n          node._initDD =\r\n        node._isExternal =  // DOM needs to be re-parented on a drop\r\n        node._temporaryRemoved = true; // so it can be inserted onDrag below\r\n        } else {\r\n          node.w = w; node.h = h;\r\n          node._temporaryRemoved = true; // so we can insert it\r\n        }\r\n\r\n        // clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)\r\n        this._itemRemoving(node.el, false);\r\n\r\n        dd.on(el, 'drag', onDrag);\r\n        // make sure this is called at least once when going fast #1578\r\n        onDrag(event as DragEvent, el, helper);\r\n        return false; // prevent parent from receiving msg (which may be a grid as well)\r\n      })\r\n    /**\r\n     * Leaving our grid area...\r\n     */\r\n      .on(this.el, 'dropout', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      // console.log(`out ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n        let node = el.gridstackNode;\r\n        if (!node) return false;\r\n        // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\r\n        // so skip this one if we're not the active grid really..\r\n        if (!node.grid || node.grid === this) {\r\n          this._leave(el, helper);\r\n          // if we were created as temporary nested grid, go back to before state\r\n          if (this._isTemp) {\r\n            this.removeAsSubGrid(node);\r\n          }\r\n        }\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n      })\r\n    /**\r\n     * end - releasing the mouse\r\n     */\r\n      .on(this.el, 'drop', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n        let node = el.gridstackNode;\r\n        // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\r\n        if (node?.grid === this && !node._isExternal) return false;\r\n\r\n        let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n        this.placeholder.remove();\r\n\r\n        // notify previous grid of removal\r\n        // console.log('drop delete _gridstackNodeOrig') // TEST\r\n        let origNode = el._gridstackNodeOrig;\r\n        delete el._gridstackNodeOrig;\r\n        if (wasAdded && origNode?.grid && origNode.grid !== this) {\r\n          let oGrid = origNode.grid;\r\n          oGrid.engine.removedNodes.push(origNode);\r\n          oGrid._triggerRemoveEvent()._triggerChangeEvent();\r\n          // if it's an empty sub-grid that got auto-created, nuke it\r\n          if (oGrid.parentGridItem && !oGrid.engine.nodes.length && oGrid.opts.subGridDynamic) {\r\n            oGrid.removeAsSubGrid();\r\n          }\r\n        }\r\n\r\n        if (!node) return false;\r\n\r\n        // use existing placeholder node as it's already in our list with drop location\r\n        if (wasAdded) {\r\n          this.engine.cleanupNode(node); // removes all internal _xyz values\r\n          node.grid = this;\r\n        }\r\n        dd.off(el, 'drag');\r\n        // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n        // as the helper will be nuked by jquery-ui otherwise. TODO: update old code path\r\n        if (helper !== el) {\r\n          helper.remove();\r\n          el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n          if (wasAdded) {\r\n            el = el.cloneNode(true) as GridItemHTMLElement;\r\n          }\r\n        } else {\r\n          el.remove(); // reduce flicker as we change depth here, and size further down\r\n          this._removeDD(el);\r\n        }\r\n        if (!wasAdded) return false;\r\n        el.gridstackNode = node;\r\n        node.el = el;\r\n        let subGrid = node.subGrid?.el?.gridstack; // set when actual sub-grid present\r\n        // @ts-ignore\r\n        Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\r\n        Utils.removePositioningStyles(el);// @ts-ignore\r\n        this._writeAttr(el, node);\r\n        el.classList.add(gridDefaults.itemClass, this.opts.itemClass);\r\n        this.el.appendChild(el);// @ts-ignore // TODO: now would be ideal time to _removeHelperStyle() overriding floating styles (native only)\r\n        if (subGrid) {\r\n          subGrid.parentGridItem = node;\r\n          if (!subGrid.opts.styleInHead) subGrid._updateStyles(true); // re-create sub-grid styles now that we've moved\r\n        }\r\n        this._updateContainerHeight();\r\n        this.engine.addedNodes.push(node);// @ts-ignore\r\n        this._triggerAddEvent();// @ts-ignore\r\n        this._triggerChangeEvent();\r\n\r\n        this.engine.endUpdate();\r\n        if (this._gsEventHandler['dropped']) {\r\n          this._gsEventHandler['dropped']({...event, type: 'dropped'}, origNode && origNode.grid ? origNode : undefined, node);\r\n        }\r\n\r\n        // wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up\r\n        window.setTimeout(() => {\r\n          // IFF we are still there (some application will use as placeholder and insert their real widget instead and better call makeWidget())\r\n          if (node.el && node.el.parentElement) {\r\n            this._prepareDragDropByNode(node);\r\n          } else {\r\n            this.engine.removeNode(node);\r\n          }\r\n          delete node.grid._isTemp;\r\n        });\r\n\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n      });\r\n    return this;\r\n  }\r\n\r\n  /** @internal mark item for removal */\r\n  private _itemRemoving(el: GridItemHTMLElement, remove: boolean) {\r\n    let node = el ? el.gridstackNode : undefined;\r\n    if (!node || !node.grid || el.classList.contains(this.opts.removableOptions.decline)) return;\r\n    remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;\r\n    remove ? el.classList.add('grid-stack-item-removing') : el.classList.remove('grid-stack-item-removing');\r\n  }\r\n\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  protected _setupRemoveDrop(): GridStack {\r\n    if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n      let trashEl = document.querySelector(this.opts.removable) as HTMLElement;\r\n      if (!trashEl) return this;\r\n      // only register ONE drop-over/dropout callback for the 'trash', and it will\r\n      // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\r\n      // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n      if (!dd.isDroppable(trashEl)) {\r\n        dd.droppable(trashEl, this.opts.removableOptions)\r\n          .on(trashEl, 'dropover', (event, el) => this._itemRemoving(el, true))\r\n          .on(trashEl, 'dropout',  (event, el) => this._itemRemoving(el, false));\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal prepares the element for drag&drop **/\r\n  protected _prepareDragDropByNode(node: GridStackNode): GridStack {\r\n    let el = node.el;\r\n    const noMove = node.noMove || this.opts.disableDrag;\r\n    const noResize = node.noResize || this.opts.disableResize;\r\n\r\n    // check for disabled grid first\r\n    if (this.opts.staticGrid || (noMove && noResize)) {\r\n      if (node._initDD) {\r\n        this._removeDD(el); // nukes everything instead of just disable, will add some styles back next\r\n        delete node._initDD;\r\n      }\r\n      el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n      return this;\r\n    }\r\n\r\n    if (!node._initDD) {\r\n      // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n      let cellWidth: number;\r\n      let cellHeight: number;\r\n\r\n      /** called when item starts moving/resizing */\r\n      let onStartMoving = (event: Event, ui: DDUIData) => {\r\n        // trigger any 'dragstart' / 'resizestart' manually\r\n        if (this._gsEventHandler[event.type]) {\r\n          this._gsEventHandler[event.type](event, event.target);\r\n        }\r\n        cellWidth = this.cellWidth();\r\n        cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n\r\n        this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n\r\n      /** called when item is being dragged/resized */\r\n      let dragOrResize = (event: MouseEvent, ui: DDUIData) => {\r\n        this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n\r\n      /** called when the item stops moving/resizing */\r\n      let onEndMoving = (event: Event) => {\r\n        this.placeholder.remove();\r\n        delete node._moving;\r\n        delete node._event;\r\n        delete node._lastTried;\r\n\r\n        // if the item has moved to another grid, we're done here\r\n        let target: GridItemHTMLElement = event.target as GridItemHTMLElement;\r\n        if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\r\n\r\n        node.el = target;\r\n\r\n        if (node._isAboutToRemove) {\r\n          let grid = el.gridstackNode.grid;\r\n          if (grid._gsEventHandler[event.type]) {\r\n            grid._gsEventHandler[event.type](event, target);\r\n          }\r\n          grid.engine.nodes.push(node); // temp add it back so we can proper remove it next\r\n          grid.removeWidget(el, true, true);\r\n        } else {\r\n          Utils.removePositioningStyles(target);\r\n          if (node._temporaryRemoved) {\r\n            // got removed - restore item back to before dragging position\r\n            Utils.copyPos(node, node._orig);// @ts-ignore\r\n            this._writePosAttr(target, node);\r\n            this.engine.addNode(node);\r\n          } else {\r\n            // move to new placeholder location\r\n            this._writePosAttr(target, node);\r\n          }\r\n          if (this._gsEventHandler[event.type]) {\r\n            this._gsEventHandler[event.type](event, target);\r\n          }\r\n        }\r\n        // @ts-ignore\r\n        this._extraDragRow = 0;// @ts-ignore\r\n        this._updateContainerHeight();// @ts-ignore\r\n        this._triggerChangeEvent();\r\n\r\n        this.engine.endUpdate();\r\n      }\r\n\r\n      dd.draggable(el, {\r\n        start: onStartMoving,\r\n        stop: onEndMoving,\r\n        drag: dragOrResize\r\n      }).resizable(el, {\r\n        start: onStartMoving,\r\n        stop: onEndMoving,\r\n        resize: dragOrResize\r\n      });\r\n      node._initDD = true; // we've set DD support now\r\n    }\r\n\r\n    // finally fine tune move vs resize by disabling any part...\r\n    dd.draggable(el, noMove ? 'disable' : 'enable')\r\n      .resizable(el, noResize ? 'disable' : 'enable');\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal handles actual drag/resize start **/\r\n  protected _onStartMoving(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void {\r\n    this.engine.cleanNodes()\r\n      .beginUpdate(node);\r\n    // @ts-ignore\r\n    this._writePosAttr(this.placeholder, node)\r\n    this.el.appendChild(this.placeholder);\r\n    // console.log('_onStartMoving placeholder') // TEST\r\n\r\n    node.el = this.placeholder;\r\n    node._lastUiPosition = ui.position;\r\n    node._prevYPix = ui.position.top;\r\n    node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\r\n    delete node._lastTried;\r\n\r\n    if (event.type === 'dropover' && node._temporaryRemoved) {\r\n      // console.log('engine.addNode x=' + node.x); // TEST\r\n      this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\r\n      node._moving = true; // AFTER, mark as moving object (wanted fix location before)\r\n    }\r\n\r\n    // set the min/max resize info\r\n    this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop as number, this.opts.marginRight as number, this.opts.marginBottom as number, this.opts.marginLeft as number);\r\n    if (event.type === 'resizestart') {\r\n      dd.resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1))\r\n        .resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\r\n      if (node.maxW) { dd.resizable(el, 'option', 'maxWidth', cellWidth * node.maxW); }\r\n      if (node.maxH) { dd.resizable(el, 'option', 'maxHeight', cellHeight * node.maxH); }\r\n    }\r\n  }\r\n\r\n  /** @internal handles actual drag/resize **/\r\n  protected _dragOrResize(el: GridItemHTMLElement, event: MouseEvent, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void {\r\n    let p = {...node._orig}; // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\r\n    let resizing: boolean;\r\n    let mLeft = this.opts.marginLeft as number,\r\n      mRight = this.opts.marginRight as number,\r\n      mTop = this.opts.marginTop as number,\r\n      mBottom = this.opts.marginBottom as number;\r\n\r\n    // if margins (which are used to pass mid point by) are large relative to cell height/width, reduce them down #1855\r\n    let mHeight = Math.round(cellHeight * 0.1),\r\n      mWidth = Math.round(cellWidth * 0.1);\r\n    mLeft = Math.min(mLeft, mWidth);\r\n    mRight = Math.min(mRight, mWidth);\r\n    mTop = Math.min(mTop, mHeight);\r\n    mBottom = Math.min(mBottom, mHeight);\r\n\r\n    if (event.type === 'drag') {\r\n      if (node._temporaryRemoved) return; // handled by dropover\r\n      let distance = ui.position.top - node._prevYPix;\r\n      node._prevYPix = ui.position.top;\r\n      if (this.opts.draggable.scroll !== false) {\r\n        Utils.updateScrollPosition(el, ui.position, distance);\r\n      }\r\n\r\n      // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\r\n      let left = ui.position.left + (ui.position.left > node._lastUiPosition.left  ? -mRight : mLeft);\r\n      let top = ui.position.top + (ui.position.top > node._lastUiPosition.top  ? -mBottom : mTop);\r\n      p.x = Math.round(left / cellWidth);\r\n      p.y = Math.round(top / cellHeight);\r\n\r\n      // @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\r\n      let prev = this._extraDragRow;\r\n      if (this.engine.collide(node, p)) {\r\n        let row = this.getRow();\r\n        let extra = Math.max(0, (p.y + node.h) - row);\r\n        if (this.opts.maxRow && row + extra > this.opts.maxRow) {\r\n          extra = Math.max(0, this.opts.maxRow - row);\r\n        }// @ts-ignore\r\n        this._extraDragRow = extra;// @ts-ignore\r\n      } else this._extraDragRow = 0;// @ts-ignore\r\n      if (this._extraDragRow !== prev) this._updateContainerHeight();\r\n\r\n      if (node.x === p.x && node.y === p.y) return; // skip same\r\n      // DON'T skip one we tried as we might have failed because of coverage <50% before\r\n      // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\r\n    } else if (event.type === 'resize')  {\r\n      if (p.x < 0) return;\r\n      // Scrolling page if needed\r\n      Utils.updateScrollResize(event, el, cellHeight);\r\n\r\n      // get new size\r\n      p.w = Math.round((ui.size.width - mLeft) / cellWidth);\r\n      p.h = Math.round((ui.size.height - mTop) / cellHeight);\r\n      if (node.w === p.w && node.h === p.h) return;\r\n      if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h) return; // skip one we tried (but failed)\r\n\r\n      // if we size on left/top side this might move us, so get possible new position as well\r\n      let left = ui.position.left + mLeft;\r\n      let top = ui.position.top + mTop;\r\n      p.x = Math.round(left / cellWidth);\r\n      p.y = Math.round(top / cellHeight);\r\n\r\n      resizing = true;\r\n    }\r\n\r\n    node._event = event;\r\n    node._lastTried = p; // set as last tried (will nuke if we go there)\r\n    let rect: GridStackPosition = { // screen pix of the dragged box\r\n      x: ui.position.left + mLeft,\r\n      y: ui.position.top + mTop,\r\n      w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,\r\n      h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom\r\n    };\r\n    if (this.engine.moveNodeCheck(node, {...p, cellWidth, cellHeight, rect, resizing})) {\r\n      node._lastUiPosition = ui.position;\r\n      this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);\r\n      delete node._skipDown;\r\n      if (resizing && node.subGrid) node.subGrid.onParentResize();\r\n      this._extraDragRow = 0;// @ts-ignore\r\n      this._updateContainerHeight();\r\n\r\n      let target = event.target as GridItemHTMLElement;// @ts-ignore\r\n      this._writePosAttr(target, node);\r\n      if (this._gsEventHandler[event.type]) {\r\n        this._gsEventHandler[event.type](event, target);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @internal called when item leaving our area by either cursor dropout event\r\n   * or shape is outside our boundaries. remove it from us, and mark temporary if this was\r\n   * our item to start with else restore prev node values from prev grid it came from.\r\n   **/\r\n  protected _leave(el: GridItemHTMLElement, helper?: GridItemHTMLElement): void {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n\r\n    dd.off(el, 'drag'); // no need to track while being outside\r\n\r\n    // this gets called when cursor leaves and shape is outside, so only do this once\r\n    if (node._temporaryRemoved) return;\r\n    node._temporaryRemoved = true;\r\n\r\n    this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\r\n    node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\r\n\r\n    if (this.opts.removable === true) { // boolean vs a class string\r\n      // item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so\r\n      this._itemRemoving(el, true);\r\n    }\r\n\r\n    // finally if item originally came from another grid, but left us, restore things back to prev info\r\n    if (el._gridstackNodeOrig) {\r\n      // console.log('leave delete _gridstackNodeOrig') // TEST\r\n      el.gridstackNode = el._gridstackNodeOrig;\r\n      delete el._gridstackNodeOrig;\r\n    } else if (node._isExternal) {\r\n      // item came from outside (like a toolbar) so nuke any node info\r\n      delete node.el;\r\n      delete el.gridstackNode;\r\n      // and restore all nodes back to original\r\n      this.engine.restoreInitial();\r\n    }\r\n  }\r\n\r\n  // legacy method removed\r\n  public commit(): GridStack { obsolete(this, this.batchUpdate(false), 'commit', 'batchUpdate', '5.2'); return this; }\r\n}\r\n","/**\r\n * dd-gridstack.ts 8.4.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { GridItemHTMLElement, GridStackElement, DDDragInOpt } from './types';\r\nimport { Utils } from './utils';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElement, DDElementHost } from './dd-element';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n// let count = 0; // TEST\r\n\r\n/**\r\n * HTML Native Mouse and Touch Events Drag and Drop functionality.\r\n */\r\nexport class DDGridStack {\r\n\r\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddResizable && dEl.cleanResizable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupResizable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\r\n        let autoHide = !grid.opts.alwaysShowResizeHandle;\r\n        dEl.setupResizable({\r\n          ...grid.opts.resizable,\r\n          ...{ handles, autoHide },\r\n          ...{\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            resize: opts.resize\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddDraggable && dEl.cleanDraggable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupDraggable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        dEl.setupDraggable({\r\n          ...grid.opts.draggable,\r\n          ...{\r\n            // containment: (grid.parentGridItem && !grid.opts.dragOut) ? grid.el.parentElement : (grid.opts.draggable.containment || null),\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            drag: opts.drag\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\r\n    return this;\r\n  }\r\n\r\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): DDGridStack {\r\n    if (typeof opts.accept === 'function' && !opts._accept) {\r\n      opts._accept = opts.accept;\r\n      opts.accept = (el) => opts._accept(el);\r\n    }\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\r\n      } else if (opts === 'destroy') {\r\n        if (dEl.ddDroppable) { // error to call destroy if not there\r\n          dEl.cleanDroppable();\r\n        }\r\n      } else if (opts === 'option') {\r\n        dEl.setupDroppable({ [key]: value });\r\n      } else {\r\n        dEl.setupDroppable(opts);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** true if element is droppable */\r\n  public isDroppable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isDraggable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isResizable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\r\n  }\r\n\r\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl =>\r\n      dEl.on(name, (event: Event) => {\r\n        callback(\r\n          event,\r\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\r\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\r\n      })\r\n    );\r\n    return this;\r\n  }\r\n\r\n  public off(el: GridItemHTMLElement, name: string): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\r\n    return this;\r\n  }\r\n\r\n  /** @internal returns a list of DD elements, creating them on the fly by default */\r\n  protected _getDDElements(els: GridStackElement, create = true): DDElement[] {\r\n    let hosts = Utils.getElements(els) as DDElementHost[];\r\n    if (!hosts.length) return [];\r\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\r\n    if (!create) { list.filter(d => d); } // remove nulls\r\n    return list;\r\n  }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Utils","static","els","document","doc","undefined","isNaN","el","getElementById","list","querySelectorAll","length","Array","from","substring","querySelector","a","b","y","h","x","w","isIntercepted","x0","x1","y0","y1","nodes","dir","column","reduce","col","n","Math","max","sort","id","parent","options","style","createElement","nonce","setAttribute","styleSheet","cssText","appendChild","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","parentNode","remove","selector","rules","addRule","insertRule","v","toLowerCase","Boolean","value","Number","val","unit","match","Error","parseFloat","target","sources","forEach","source","this","defaults","keys","doMinMax","minW","minH","maxW","maxH","node","i","removeEl","grid","autoPosition","noResize","noMove","locked","name","classList","contains","parentElement","func","delay","isWaiting","args","setTimeout","position","removeProperty","left","top","width","height","scrollingElement","documentElement","getComputedStyle","test","overflow","overflowY","getScrollElement","distance","rect","getBoundingClientRect","innerHeightOrClientHeight","window","innerHeight","clientHeight","bottom","offsetDiffDown","offsetDiffUp","scrollEl","prevScroll","scrollTop","offsetHeight","abs","event","offsetTop","pointerPosY","clientY","scrollBy","behavior","skipFields","ret","clone","find","k","cloneDeep","cloneNode","removeAttribute","getElement","styles","s","isArray","e","info","evt","type","button","which","buttons","bubbles","cancelable","dataTransfer","p","simulatedType","simulatedEvent","createEvent","initMouseEvent","screenX","screenY","clientX","ctrlKey","altKey","shiftKey","metaKey","dispatchEvent","GridStackEngine","opts","addedNodes","removedNodes","maxRow","_float","float","onChange","batchUpdate","flag","doPack","batchMode","_prevFloat","saveInitial","_packNodes","_notify","_useEntireRowArea","nn","_hasLocked","_moving","_skipDown","_fixCollisions","collide","opt","sortNodes","nested","swap","area","skip","didMove","newOpt","pack","moved","moveNode","copyPos","skip2","skipId","_id","skip2Id","collideAll","filter","directionCollideCoverage","collides","_rect","r0","r","r2","yOver","MAX_VALUE","xOver","overMax","over","min","cacheRects","right","_doSwap","_dirty","touching","isTouching","t","isAreaEmpty","compact","layout","doSort","wasBatch","wasColumnResize","_inColumnResize","copyNodes","index","after","addNode","_updating","_orig","newY","prepareNode","resizing","_idSeq","sanitizeMinMax","nodeBoundFix","before","findCacheLayout","copy","cacheOneLayout","samePos","getDirtyNodes","verify","dirtyNodes","concat","cleanNodes","_lastTried","some","restoreInitial","findEmptyPosition","nodeList","found","floor","box","triggerAddEvent","skipCollision","_temporaryRemoved","_removeDOM","push","removeNode","removeDOM","triggerEvent","_isAboutToRemove","removeAll","_layouts","moveNodeCheck","changedPosConstrain","clonedNode","map","canMove","getRow","gridstackNode","c","willItFit","_willFitPos","cleanupNode","content","wasUndefinedPack","prevPos","needToMove","activeDrag","subGridDynamic","_isTemp","areaIntercept","a1","a2","makeSubGrid","row","beginUpdate","endUpdate","save","saveElement","saveCB","len","wl","l","removeInternalForSave","layoutsNodesChange","ratio","round","columnChanged","prevColumn","doCompact","cacheLayout","newNodes","domOrder","cacheNodes","lastIndex","cacheNode","j","findIndex","splice","move","scale","clear","gridDefaults","alwaysShowResizeHandle","animate","auto","cellHeight","cellHeightThrottle","cellHeightUnit","draggable","handle","appendTo","scroll","itemClass","margin","marginUnit","minRow","oneColumnSize","placeholderClass","placeholderText","removableOptions","accept","decline","resizable","handles","rtl","dragInDefaultOptions","DDManager","isTouch","DocumentTouch","navigator","maxTouchPoints","msMaxTouchPoints","DDTouch","simulateMouseEvent","touches","preventDefault","touch","changedTouches","simulatePointerMouseEvent","touchstart","touchHandled","touchmove","touchend","pointerLeaveTimeout","clearTimeout","wasDragging","dragElement","pointerdown","releasePointerCapture","pointerId","pointerenter","pointerleave","DDResizableHandle","constructor","host","direction","option","moving","_mouseDown","bind","_mouseMove","_mouseUp","_init","add","prefix","zIndex","userSelect","addEventListener","destroy","mouseDownEvent","removeEventListener","removeChild","stopPropagation","_triggerEvent","DDBaseImplement","_eventRegister","disabled","_disabled","on","callback","off","enable","disable","eventName","DDResizable","super","_ui","containmentRect","newRect","originalRect","scrolled","temporalRect","size","_mouseOver","_mouseOut","_setupAutoHide","autoHide","_setupHandlers","_removeHandlers","updateOption","updateHandles","updateAutoHide","overResizeElement","handlerDirection","handlers","split","trim","start","_resizeStart","stop","_resizeStop","_resizing","scrollY","startEvent","_setupHelper","_applyChange","ev","initEvent","_getChange","resize","_cleanHelper","elOriginStyleVal","_originStyleProp","parentOriginStylePosition","opacity","oEvent","offsetX","offsetY","indexOf","constrain","_constrainSize","oWidth","oHeight","maxWidth","MAX_SAFE_INTEGER","minWidth","maxHeight","minHeight","containmentEl","DDDraggable","handleName","dragEl","forDestroy","dragTimeout","dragging","helper","mouseHandled","closest","cancel","dropElement","activeElement","blur","_callDrag","drag","ui","_dragFollow","pauseDrag","pause","isInteger","ddElement","ddDroppable","_createHelper","_setupHelperContainmentStyle","dragOffset","_getDragOffset","helperContainment","_setupHelperStyle","_removeHelperStyle","drop","body","dragElementOriginStyle","originStyleProp","pointerEvents","willChange","transition","offset","offsetLeft","xformOffsetX","xformOffsetY","testEl","addElStyles","testElPosition","targetOffset","DDDroppable","_mouseEnter","_mouseLeave","_setupAccept","_canDrop","out","parentDrop","matches","DDElement","ddDraggable","ddResizable","setupDraggable","cleanDraggable","setupResizable","cleanResizable","setupDroppable","cleanDroppable","dd","_getDDElements","dEl","getAttribute","dragIn","droppable","_accept","isDroppable","isDraggable","isResizable","create","hosts","getElements","init","d","GridStack","elOrString","getGridElement","gridstack","console","error","grids","getGridElements","children","load","addRemoveCB","implementation","createHTMLDocument","innerHTML","class","engineClass","placeholder","_placeholder","placeholderChild","className","_gsEventHandler","_extraDragRow","rowAttr","toNumber","_alwaysShowResizeHandle","staticGrid","toBool","handleClass","_initMargin","disableOneColumnMode","_widthOrContainer","_prevColumn","getColumn","parentGridItem","closestUpByClass","subGrid","_isAutoCellHeight","_styleSheetClass","_setStaticClass","engine","cbNodes","_writePosAttr","_updateStyles","getGridItems","_prepareElement","setAnimation","_setupRemoveDrop","_setupAcceptWidget","_updateWindowResizeEvent","addWidget","arguments","domAttr","_readAttr","_writeAttr","_insertNotAppend","prepend","makeWidget","ops","nodeToAdd","saveContent","subGridTemplate","autoColumn","subGridOpts","newItem","newItemOpt","_removeDD","_prepareDragDropByNode","update","addGrid","_autoColumn","_event","removeAsSubGrid","nodeThatRemoved","pGrid","removeWidget","saveGridOpt","sub","listOrOpt","marginBottom","marginTop","marginRight","marginLeft","origShow","removeInternalAndSame","addRemove","haveCoord","items","_ignoreLayoutsNodeChange","prevCB","removed","item","_triggerRemoveEvent","_triggerAddEvent","_triggerChangeEvent","getCellHeight","forcePixel","rows","parseInt","marginDiff","cellWidth","data","parseHeight","clientWidth","innerWidth","domNodes","oldColumn","oneColumnModeDomSort","offAll","setStatic","_removeStylesheet","getFloat","getCellFromPixel","useDocRelative","containerPos","relativeLeft","relativeTop","columnWidth","rowHeight","_updateContainerHeight","noData","detail","log","doAnimate","updateClass","recurse","warn","m","itemContent","styleInHead","changed","ddChanged","getMargin","elements","CustomEvent","Event","_styles","removeStylesheet","forceUpdate","styleLocation","createStylesheet","_max","addCSSRule","getHeight","String","same","attrs","clearDefaultAttr","classes","onParentResize","changedColumn","oneColumn","_cellHeightThrottle","throttle","forceRemove","workTodo","_windowResizeBind","margins","dragInOptions","movable","enableMove","enableResize","doEnable","disableDrag","disableResize","_initDD","acceptWidgets","removable","onDrag","_onStartMoving","_dragOrResize","canAccept","_leave","_isExternal","offsetWidth","_gridstackNodeOrig","_itemRemoving","wasAdded","origNode","oGrid","removePositioningStyles","trashEl","onStartMoving","dragOrResize","onEndMoving","_lastUiPosition","_prevYPix","mLeft","mRight","mTop","mBottom","mHeight","mWidth","updateScrollPosition","prev","extra","updateScrollResize","commit","Engine","GDRev"],"sourceRoot":""}